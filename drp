#!/bin/bash
# drp (DVD Rip Prep) bash script - Dec. 9 2024
#
# This script attempts to take an MKV file produced by MakeMKV from a DVD source
# and output a new file without telecine or interlacing and at the correct frame
# rate.  The goal here is to do the minimum amount of processing necessary, since
# just generally applying detelecine and deinterlacing where it isn't necessary
# might reduce the image quality.  In most cases, the script should give you a
# video that consists of more than 99% progressive frames without introducing
# motion irregularities resulting from dropped or duplicated frames.

# Settings
WRITELOGS=1
CONVPAL=1
ALLOWLOSS="0.07"
HTCTHRESH="2.5"
INTLTHRESH="50"
OUTPUTJOIN=1
OUTPUTSEGS=0
MERGEMKV=1
FIXRATE=1
RATELOCK="0.005"
AUTOMAP=1
MAPPER="$(dirname "$0")/smap"
OUTDIR="CHANGEME"

# Best not to change the following settings unless you know what you're doing
TEMPROOT="$OUTDIR/00DRP"
TEMPDIR="$OUTDIR/00DRP/$(date +%s)"
LOGDIR="$TEMPDIR/LOGS"
STEP1DIR="$TEMPDIR/STEP1"
STEP2DIR="$TEMPDIR/STEP2"
STEP3DIR="$TEMPDIR/STEP3"
PRELOG="/tmp/prelog.$(date +%s)"
# End of settings

function setup {
	echo "Checking dependencies..."
	if ! command -v ffmpeg >/dev/null 2>&1; then
		echo "ERROR: Can't find ffmpeg."
		exit 1
	fi
	if ! command -v ffprobe >/dev/null 2>&1; then
		echo "ERROR: Can't find ffprobe."
		exit 1
	fi
	if ! command -v mkvmerge >/dev/null 2>&1; then
		echo "ERROR: Can't find mkvmerge."
		exit 1
	fi
	if ! command -v bc >/dev/null 2>&1; then
		echo "ERROR: Can't find bc."
		exit 1
	fi
	echo "Checking directories..."
	if [ ! -d "$OUTDIR" ] && [ "$dryrun" != 1 ]; then
		echo "ERROR: OUTDIR ($OUTDIR) does not exist."
		exit 1
	fi
	if [ ! -d "$TEMPROOT" ]; then
		mkdir "$TEMPROOT" || exit 1
	fi
	if [ ! -d "$TEMPDIR" ]; then
		mkdir "$TEMPDIR" || exit 1
	fi
	if [ ! -d "$LOGDIR" ] && [ "$dryrun" != 1 ]; then
		mkdir "$LOGDIR" || exit 1
	fi
	if [ ! -d "$STEP1DIR" ] && [ "$dryrun" != 1 ]; then
		mkdir "$STEP1DIR" || exit 1
	fi
	if [ ! -d "$STEP2DIR" ] && [ "$dryrun" != 1 ]; then
		mkdir "$STEP2DIR" || exit 1
	fi
	if [ ! -d "$STEP3DIR" ] && [ "$dryrun" != 1 ]; then
		mkdir "$STEP3DIR" || exit 1
	fi
}

function reportsettings {
	echo "Reporting settings..."
	if [ "$WRITELOGS" = 1 ]; then
		echo "Logging is enabled." |tee -a "$PRELOG"
	else
		echo "Logging is disabled" |tee -a "$PRELOG"
	fi
	if [ "$CONVPAL" = 1 ]; then
		echo "PAL conversion is enabled." |tee -a "$PRELOG"
	else
		echo "PAL conversion is disabled" |tee -a "$PRELOG"
	fi
	if [ "$OUTPUTJOIN" = 1 ]; then
		echo "Outputting rejoined video is enabled." |tee -a "$PRELOG"
	else
		echo "Outputting rejoined video is disabled." |tee -a "$PRELOG"
	fi
	if [ "$OUTPUTSEGS" = 1 ]; then
		echo "Outputting unjoined segments is enabled." |tee -a "$PRELOG"
	else
		echo "Outputting unjoined segments is disabled." |tee -a "$PRELOG"
	fi
	if [ "$MERGEMKV" = 1 ]; then
		echo "Merging output with the original MKV is enabled." |tee -a "$PRELOG"
	else
		echo "Merging output with the original MKV is disabled" |tee -a "$PRELOG"
	fi
	if [ "$AUTOMAP" = 1 ]; then
		echo "Automatic mapping is enabled, using $MAPPER." |tee -a "$PRELOG"
	else
		echo "Automatic mapping is disabled" |tee -a "$PRELOG"
	fi
	if [ "$dryrun" = 1 ]; then
		echo "Doing a dry run..." |tee -a "$PRELOG"
	fi
	echo "FIXRATE mode is $FIXRATE"
	echo "OUTDIR is $OUTDIR" |tee -a "$PRELOG"
	echo "TEMPDIR is $TEMPDIR" |tee -a "$PRELOG"
	echo "LOGDIR is $LOGDIR" |tee -a "$PRELOG"
	echo "STEP1DIR is $STEP1DIR" |tee -a "$PRELOG"
	echo "STEP2DIR is $STEP2DIR" |tee -a "$PRELOG"
	echo "STEP3DIR is $STEP3DIR" |tee -a "$PRELOG"
}

function cleanup {
	echo "Cleaning up temporary files and directories..."
	if [ -d "$TEMPDIR" ]; then
		cd $TEMPDIR || exit 1
		if [ "$(pwd)" == "$TEMPDIR" ]; then
			rm -f * >/dev/null 2>&1
		fi
	fi
	if [ -d "$STEP1DIR" ] && [ "$dryrun" != 1 ]; then
		cd "$STEP1DIR" || exit 1
		if [ "$(pwd)" == "$STEP1DIR" ]; then
			rm -f * >/dev/null 2>&1
		fi
	fi
	if [ -d "$STEP2DIR" ] && [ "$dryrun" != 1 ]; then
		cd "$STEP2DIR" || exit 1
		if [ "$(pwd)" == "$STEP2DIR" ]; then
			rm -f * >/dev/null 2>&1
		fi
	fi
	if [ -d "$STEP3DIR" ] && [ "$dryrun" != 1 ]; then
		cd "$STEP3DIR" || exit 1
		if [ "$(pwd)" == "$STEP3DIR" ]; then
			rm -f * >/dev/null 2>&1
		fi
	fi
	if [ -f /tmp/idet.out ]; then
		rm -f /tmp/idet.out
	fi
	if [ -f /tmp/idet.grep ]; then
		rm -f /tmp/idet.grep
	fi
	cd "$rundir" || exit 1
}

function checkduration {
	infileck="$1"
	outfileck="$2"
	indurck=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$infileck")
	outdurck=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$outfileck")
	rtdiff=$(echo "$indurck" - "$outdurck" |bc -l)
	if [ "$(echo "$rtdiff < 0" |bc -l)" -eq 1 ]; then
		rtdiff=$(echo "$rtdiff * -1" |bc -l)
	fi
	pctdiff=$(echo "($rtdiff / $indurck) * 100" |bc -l)
	tryalt=0
	if [ "$rtdiff" == "0" ]; then
		echo "Output duration matches input.  That's good." |tee -a "$logfile"
	elif [ "$(echo "$pctdiff <= $ALLOWLOSS" |bc -l)" -eq 1 ]; then
		echo "Output duration is changed but within acceptable range: out $outdurck vs in $indurck" |tee -a "$logfile"
	else
		echo "WARNING: Output and input durations out of range: out $outdurck vs in $indurck" |tee -a "$logfile"
		if [ "$step" == "1" ] || [ "$step" == "4" ]; then
			basename=$(echo "$outfileck"| cut -f1 -d.)
			rename="${basename}-TIMEDIFF-${rtdiff}sec.mkv"
			refile="$rename"
			mv "$outfile" "$refile"
			outfile="$refile"
		fi
		if [ "$step" == "3" ]; then
			echo "Trying alternate method for comparison..." |tee -a "$logfile"
			tryalt=1
		fi
	fi

}

function mergeinout {
	inname="$(echo "$infile" |cut -d. -f1)"
	mergename="${inname}-merged.mkv"
	if [ -f "$outfile" ] && [ -f "$rundir/$clifile" ] &&  [ "$segfail" != 1 ]  && [ "$dryrun" != 1 ]; then
		echo "Merging with original file..." |tee -a "$logfile"
		mkvmerge -o "$OUTDIR/$mergename" --track-name 0:"DRP Output" "$outfile" "$rundir/$clifile"
	else
		echo "DEBUG: $outfile,$rundir/$clifile,$segfail,$dryrun"
	fi
	if [ "$SUDO_USER" ]; then
		chown "$SUDO_USER" "$OUTDIR/$mergename"
	fi
}

function palinterlaced {
	if [ $CONVPAL = 1 ]; then
		echo "25FPS PAL will be converted to 24FPS.  Two files will be produced: an MKV" |tee -a "$logfile"
		echo "containing the video and another containing the tempo corrected audio." |tee -a "$logfile"
		echo "Duration will increase due to the slower frame rate." |tee -a "$logfile";echo
		outaname="${inname}-24fps_palntsc-deint-audio-vorbis.mkv"
		outafile="$OUTDIR/$outaname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-vn -sn \
			-af "atempo=0.959040959040959" \
			-c:a libvorbis "$outafile"
		outname="${inname}-24fps_pal2ntsc-deint-ffv1.mkv"
		outfile="$OUTDIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-r 24000/1001 \
			-i "$file" \
			-an -sn \
			-vf "bwdif=mode=send_frame" \
			-c:v ffv1 "$outfile"
	else
		outname="${inname}-25fps_pal-deint-ffv1.mkv"
		outfile="$OUTDIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-an -sn \
			-vf "bwdif=mode=send_frame" \
			-r 25 \
			-c:v ffv1 "$outfile"
	fi
}

function palprogressive {
	if [ $CONVPAL = 1 ]; then
		echo "25FPS PAL will be converted to 24FPS.  Two files will be produced: an MKV" |tee -a "$logfile"
		echo "containing the video and another containing the tempo corrected audio." |tee -a "$logfile"
		echo "Duration will increase due to the slower frame rate." |tee -a "$logfile";echo
		outaname="${inname}-24fps_pal2ntsc-prog-audio-vorbis.mkv"
		outafile="$OUTDIR/$outaname"
		ffmpeg -n \
				-hide_banner \
				-v warning \
				-stats \
			-i "$file" \
			-vn -sn \
			-af "atempo=0.959040959040959" \
			-c:a libvorbis "$outafile"
		outname="${inname}-24fps_pal2ntsc-prog-ffv1.mkv"
		outfile="$OUTDIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-r 24000/1001 \
			-i "$file" \
			-an -sn \
			-c:v ffv1 "$outfile"
	else
		outname="${inname}-25fps_pal-prog-ffv1.mkv"
		outfile="$OUTDIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-an -sn \
			-r 25 \
			-c:v ffv1 "$outfile"
	fi
}

function hardtelecine {
	if [ "$FIXRATE" == "2" ]; then
		outname="${inname}-120fps-hdtc-ffv1.mkv"
		if [ "$step" = 1 ]; then
			outfile="$OUTDIR/$outname"
		elif [ "$step" = 3 ]; then
			outfile="$STEP3DIR/$outname"
		else
			echo "ERROR: Input step does not make sense.  This is probably a bug."
		fi
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-an -sn \
			-vf "fieldmatch,decimate,bwdif=mode=send_field:deint=interlaced" \
			-r 120000/1001 \
			-c:v ffv1 "$outfile"
	else
		outname="${inname}-24fps-hdtc-ffv1.mkv"
		intname="${inname}-24fps-hdtc-ffv1-int.mkv"
		if [ "$step" = 1 ]; then
			outfile="$OUTDIR/$outname"
			intfile="$OUTDIR/$intname"
		elif [ "$step" = 3 ]; then
			outfile="$STEP3DIR/$outname"
			intfile="$STEP3DIR/$intname"
		else
			echo "ERROR: Input step does not make sense.  This is probably a bug."
		fi
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-an -sn \
			-vf "fieldmatch,decimate,bwdif=mode=send_field:deint=interlaced" \
			-r 24000/1001 \
			-c:v ffv1 "$outfile"
	fi
	checkduration "$file" "$outfile"
	if [ "$tryalt" -eq "1" ]; then
		outnamea="$outname"
		pctdiffa="$pctdiff"
		harddi
		pctdiffb="$pctdiff"
		outnameb="$outname"
		if [ "$(echo "$pctdiffb < $pctdiffa" |bc -l)" -eq 1 ]; then
			echo "HardDI method produced a better runtime change.  Using it instead."
			outname="$outnameb"
			
		else
			echo "HardDI method was not better than HDTC.  Keeping HDTC result." 
			outname="$outnamea"
		fi
	fi
}

function hardmix {
	# For videos that mix hard telecine and interlaced segments in a way that
	# I don't know how to detect.  Use a frame level deinterlacer and up the
	# frame rate to 120, so that we can hopefully get rid of both types of
	# interlaced frames and preserve correct motion.
	# This is a step 1 only method.  Segments will go to Hard DI instead.
	outname="${inname}-120fps-hdtc-di-ffv1.mkv"
	intname="${inname}-120fps-hdtc-di-ffv1-int.mkv"
	if [ "$step" = 1 ]; then
		outfile="$OUTDIR/$outname"
		intfile="$OUTDIR/$intname"
	elif [ "$step" = 3 ]; then
		outfile="$STEP3DIR/$outname"
		intfile="$STEP3DIR/$intname"
	else
		echo "ERROR: Input step does not make sense.  This is probably a bug."
	fi
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$file" \
		-an -sn \
		-vf "bwdif=mode=send_frame:deint=all" \
		-r 120000/1001 \
		-c:v ffv1 "$outfile"
	checkduration "$file" "$outfile"
	if [ "$tryalt" -eq "1" ]; then
		echo "Already at last resort.  Nowhere to go from here."
	fi
}

function harddi {
	# HardDI is potentially destructive and only gets called as a last resort.
	# Can't find the right pattern in this video, so just deinterlace it and 
	# then drop frames that are very similar to hopfully correct motion.
	if [ "$FIXRATE" == "2" ]; then
		outname="${inname}-120fps-harddi-ffv1.mkv"
		if [ "$step" = 1 ]; then
			outfile="$OUTDIR/$outname"
		elif [ "$step" = 3 ]; then
			outfile="$STEP3DIR/$outname"
		else
			echo "ERROR: Input step does not make sense.  This is probably a bug."
		fi
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-an -sn \
			-vf "bwdif=mode=send_field:deint=all,mpdecimate=hi=200:lo=200:frac=1:max=0" \
			-r 120000/1001 \
			-c:v ffv1 "$outfile"
	elif [ "$FIXRATE" == "1" ]; then
		outname="${inname}-24fps-harddi-ffv1.mkv"
		if [ "$step" = 1 ]; then
			outfile="$OUTDIR/$outname"
		elif [ "$step" = 3 ]; then
			outfile="$STEP3DIR/$outname"
		else
			echo "ERROR: Input step does not make sense.  This is probably a bug."
		fi
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-an -sn \
			-vf "bwdif=mode=send_field:deint=all,mpdecimate=hi=200:lo=200:frac=1:max=0" \
			-r 24000/1001 \
			-c:v ffv1 "$outfile"
	else
		outname="${inname}-30fps-harddi-ffv1.mkv"
		if [ "$step" = 1 ]; then
			outfile="$OUTDIR/$outname"
		elif [ "$step" = 3 ]; then
			outfile="$STEP3DIR/$outname"
		else
			echo "ERROR: Input step does not make sense.  This is probably a bug."
		fi
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-an -sn \
			-vf "bwdif=mode=send_field:deint=all,mpdecimate=hi=200:lo=200:frac=1:max=0" \
			-r 30000/1001 \
			-c:v ffv1 "$outfile"
	fi
	checkduration "$file" "$outfile"
}

function mixed {
	outfile="$OUTDIR/$outname"
	echo;echo "The mixed method runs in four steps and takes a while to complete." |tee -a "$logfile"
	if [ "$step" = 1 ] && [ "$dryrun" != 1 ]; then
		step=2
		prepsegments
		step=3
		runsegments
		step=4
		segconcat
		outputsegs
		segfail=0
	elif [ "$step" -gt 1 ]; then
		echo "ERROR: The frame rate indicates that the segment start and/or end times are off." |tee -a "$logfile"
		echo "Try adjusting this segment to find the proper start and end points." |tee -a "$logfile"
		segfail=1
	fi
}

function softtelecine {
	if [ "$FIXRATE" == "2" ]; then
		outname="${inname}-120fps-sdtc-ffv1.mkv"
		if [ "$step" = 1 ]; then
			outfile="$OUTDIR/$outname"
		elif [ "$step" = 3 ]; then
			outfile="$STEP3DIR/$outname"
		else
			echo "ERROR: Input step does not make sense.  This is probably a bug."
		fi
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-an -sn \
			-r 120000/1001 \
			-c:v ffv1 "$outfile"
	else
		outname="${inname}-24fps-sdtc-ffv1.mkv"
		if [ "$step" = 1 ]; then
			outfile="$OUTDIR/$outname"
		elif [ "$step" = 3 ]; then
			outfile="$STEP3DIR/$outname"
		else
			echo "ERROR: Input step does not make sense.  This is probably a bug."
		fi
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-an -sn \
			-r 24000/1001 \
			-c:v ffv1 "$outfile"
	fi
	checkduration "$file" "$outfile"
	if [ "$tryalt" -eq "1" ]; then
		outnamea="$outname"
		pctdiffa="$pctdiff"
		harddi
		pctdiffb="$pctdiff"
		outnameb="$outname"
		if [ "$(echo "$pctdiffb <= $ALLOWLOSS" |bc -l)" -eq 1 ] && [ "$(echo "$pctdiffb < $pctdiffa" |bc -l)" -eq 1 ]; then
			echo "HardDI method produced a better runtime change.  Using it instead."
			outname="$outnameb"
		else
			echo "HardDI method was not better than SDTC.  Keeping SDTC result." 
			outname="$outnamea"
		fi
	fi
}

function runsegments {
	cd "$STEP2DIR" || exit 1
	mkvcount=$(ls -1 *.mkv |wc -l)
	if [ "$mkvcount" -ne 0 ]; then
		echo;echo "Running step 3 (processing segments)." |tee -a "$logfile"
		for file in $(ls -1 *segment*.mkv); do
			if [ "$segfail" != 1 ]; then
				process
				echo "file '$outname'" >>"$STEP3DIR/concat.txt"
			fi
		done
	else
		echo "ERROR: No MKV files found."
	fi
}

function segconcat {
	if [ "$OUTPUTJOIN" == "1" ]; then
		echo;echo "Running step 4 (rejoining segments)." |tee -a "$logfile"
		inname="$(echo "$infile" |cut -d. -f1)"
		outname="${inname}-rejoined.mkv"
		outfile="$OUTDIR/$outname"
		cd "$STEP3DIR" ||exit 1
		if [ -f concat.txt ] && [ "$segfail" != 1 ]; then
			ffmpeg -n \
				-hide_banner \
				-v warning \
				-stats \
				-f concat \
				-safe 0 \
				-i concat.txt \
				-c copy "$outfile"
		else
			echo "ERROR: Unexpected concatenation failure."
		fi
		checkduration "$rundir/$clifile" "$outfile"
	fi
	if [ "$SUDO_USER" ]; then
		chown "$SUDO_USER" "$outfile"
	fi
}

function outputsegs {
	if [ "$OUTPUTSEGS" == "1" ]; then
		echo "Outputting separate segment files..."
		cp "$STEP3DIR/*.mkv" "$OUTDIR"
	fi
}

function prepsegments {
		outname="${inname}-video-step1-ffv1.mkv"
		outfile="$STEP1DIR/$outname"
		if [ ! -f "$outfile" ]; then
			echo "Running step 1 (conversion to FFV1)." |tee -a "$logfile"
			ffmpeg -n \
				-an -sn \
				-hide_banner \
				-v warning \
				-stats \
				-i "$file" \
				-c:v ffv1 "$outfile"
		else
			echo "Step 1 conversion already exists, so using it." |tee -a "$logfile"
		fi
		echo;echo "Running step 2 (division into segments)." |tee -a "$logfile"
		tsfile="${inname}.smap"
		segstatus=$(ls -1 $STEP2DIR/*.mkv 2>/dev/null |wc -l)
		if [ -f "$tsfile" ] && [ "$segstatus" == 0 ]; then
			echo "Segment map file detected, making custom segments." |tee -a "$logfile"
			segindex=1
			numsegs=$(wc -l <"$tsfile")
			for segment in $(cat "$tsfile"); do
				starttime="$(echo "$segment" |cut -d, -f1)"
				endtime="$(echo "$segment" |cut -d, -f2)"
				if [ "$starttime" == "start" ]; then
					startframe=1
				else
					startframe="$(ffmpeg -y \
									-t $starttime \
									-i $outfile \
									-nostats \
									-c copy \
									-f rawvideo /dev/null \
								2>&1 |grep "frame" |sed 's/ fps.*//' |cut -d= -f2)"
				fi
				if [ "$endtime" == "end" ]; then
					endframe="$(ffprobe -v error \
									-select_streams v \
									-count_packets \
									-show_entries stream=nb_read_packets \
									-of csv=p=0 "$outfile" |head -n 1)"
				else
					endframe="$(ffmpeg -y \
									-t $endtime \
									-i $outfile \
									-nostats \
									-c copy \
									-f rawvideo /dev/null \
								2>&1 |grep "frame" |sed 's/ fps.*//' |cut -d= -f2)"
				fi
				if [ $segindex -gt 1 ]; then
					startframe=$((startframe + 1))
				fi
				if [ "$segindex" -lt 10 ]; then
					segname="$inname-segment-00$segindex-ffv1.mkv"
				elif [ "$segindex" -lt 100 ]; then
					segname="$inname-segment-0$segindex-ffv1.mkv"
				else
					segname="$inname-segment-$segindex-ffv1.mkv"
				fi
				segfile="$STEP2DIR/$segname"
				echo "Cutting segment $segindex of $numsegs: $segname..."
				ffmpeg -n \
					-hide_banner \
					-v warning \
					-stats \
					-i "$outfile" \
					-vf "trim=start_frame=$startframe:end_frame=$endframe, \
						setpts=PTS-STARTPTS" \
					-reset_timestamps 1 \
					-vcodec ffv1 "$segfile"
				segindex=$((segindex + 1))
			done
		elif [ "$segstatus" == 0 ]; then
			echo "Making 60 second segments." |tee -a "$logfile"
			segname="$inname-segment-%03d-ffv1.mkv"
			segfile="$STEP2DIR/$segname"
			ffmpeg -n \
				-i "$file" \
				-f segment \
				-segment_time 60 \
				-reset_timestamps 1 \
				-vcodec ffv1 "$segfile"
		else
			echo "Using existing Step 2 segments." |tee -a "$logfile"
		fi
}

function ntscinterlaced {
	if [ "$FIXRATE" == "2" ]; then
		outname="${inname}-120fps-deint-ffv1.mkv"
		if [ "$step" = 1 ]; then
			outfile="$OUTDIR/$outname"
		elif [ "$step" = 3 ]; then
			outfile="$STEP3DIR/$outname"
		else
			echo "ERROR: Input step does not make sense.  This is probably a bug."
		fi
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-an -sn \
			-vf "bwdif=mode=send_field" \
			-r 120000/1001 \
			-c:v ffv1 "$outfile"
	elif [ "$FIXRATE" == "1" ]; then
		# If the whole video is interlaced, keep it at 30FPS, otherwise, reduce to 24FPS.
		if [ "$step" == 1 ]; then
			outname="${inname}-30fps-deint-ffv1.mkv"
			if [ "$step" = 1 ]; then
				outfile="$OUTDIR/$outname"
			elif [ "$step" = 3 ]; then
				outfile="$STEP3DIR/$outname"
			else
				echo "ERROR: Input step does not make sense.  This is probably a bug."
			fi
			ffmpeg -n \
				-hide_banner \
				-v warning \
				-stats \
				-i "$file" \
				-an -sn \
				-vf "bwdif=mode=send_field" \
				-r 30000/1001 \
				-c:v ffv1 "$outfile"
		else
			outname="${inname}-24fps-deint-ffv1.mkv"
			if [ "$step" = 1 ]; then
				outfile="$OUTDIR/$outname"
			elif [ "$step" = 3 ]; then
				outfile="$STEP3DIR/$outname"
			else
				echo "ERROR: Input step does not make sense.  This is probably a bug."
			fi
			ffmpeg -n \
				-hide_banner \
				-v warning \
				-stats \
				-i "$file" \
				-an -sn \
				-vf "bwdif=mode=send_field" \
				-r 24000/1001 \
				-c:v ffv1 "$outfile"
		fi
	else
		outname="${inname}-30fps-deint-ffv1.mkv"
		if [ "$step" = 1 ]; then
			outfile="$OUTDIR/$outname"
		elif [ "$step" = 3 ]; then
			outfile="$STEP3DIR/$outname"
		else
			echo "ERROR: Input step does not make sense.  This is probably a bug."
		fi
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$file" \
			-an -sn \
			-vf "bwdif=mode=send_field" \
			-r 30000/1001 \
			-c:v ffv1 "$outfile"
	fi
	checkduration "$file" "$outfile"
	if [ "$tryalt" -eq "1" ]; then
		outnamea="$outname"
		pctdiffa="$pctdiff"
		harddi
		pctdiffb="$pctdiff"
		outnameb="$outname"
		if [ "$(echo "$pctdiffb <= $ALLOWLOSS" |bc -l)" -eq 1 ] && [ "$(echo "$pctdiffb < $pctdiffa" |bc -l)" -eq 1 ]; then
			echo "HardDI method produced a better runtime change.  Using it instead."
			outname="$outnameb"
		else
			echo "HardDI method was not better than regular DI.  Keeping DI result." 
			outname="$outnamea"
		fi
	fi
}

function checkinterlace {
	echo "Counting interlaced frames..."  |tee -a "$logfile"
	if [ -f "$TEMPDIR/idet.out" ]; then
		rm -f "$TEMPDIR/idet.out"
	fi
	if [ -f "$TEMPDIR/idet.grep" ]; then
		rm -f "$TEMPDIR/idet.grep"
	fi
	ffmpeg -an -sn \
		-hide_banner \
		-stats \
		-filter:v idet \
		-f null - \
		-i "$file" 2>"$TEMPDIR/idet.out"
	grep -m3 "Parsed_idet" "$TEMPDIR/idet.out" >"$TEMPDIR/idet.grep"
	idetneither=$(sed -n 1,1p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f3 |cut -dT -f1)
	idettop=$(sed -n 1,1p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f4 |cut -dB -f1)
	idetbottom=$(sed -n 1,1p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f5)
	idetsftff=$(sed -n 2,2p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f3 |cut -dB -f1)
	idetsfbff=$(sed -n 2,2p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f4 |cut -dP -f1)
	idetsfprog=$(sed -n 2,2p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f5 |cut -dU -f1)
	idetsfundet=$(sed -n 2,2p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f6)
	idetmftff=$(sed -n 3,3p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f3 |cut -dB -f1)
	idetmfbff=$(sed -n 3,3p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f4 |cut -dP -f1)
	idetmfprog=$(sed -n 3,3p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f5 |cut -dU -f1)
	idetmfundet=$(sed -n 3,3p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f6)

	echo "Non-repeating Frames: $idetneither" |tee -a "$logfile"
	echo "Top Fields: $idettop" |tee -a "$logfile"
	echo "Bottom Fields: $idetbottom" |tee -a "$logfile"
	echo "TFF: $idetsftff, $idetmftff"
	echo "BFF: $idetsfbff, $idetmfbff"
	echo "Progressive: $idetsfprog, $idetmfprog"
	echo "Undetermined: $idetsfundet, $idetmfundet"

	case "$idettop" in
		''|*[!0-9]*) idettop=0 ;;
   		*) ;;
	esac
	case "$idetbottom" in
		''|*[!0-9]*) idetbottom=0 ;;
   		*) ;;
	esac
	htcfields=$((idettop + idetbottom))
	pcthtc=$(echo "($htcfields / $inframes) * 100" |bc -l)

	idetsfintl=$(echo "$idetsftff + $idetsfbff" |bc -l)
	idetmfintl=$(echo "$idetmftff + $idetmfbff" |bc -l)
	idetallintl=$(echo "$idetsfintl + $idetmfintl" |bc -l)
	intlfields=$(echo "$idetallintl / 2" |bc -l)
	pctintl=$(echo "($intlfields / $inframes) * 100" |bc -l)
	echo "Interlaced match: $pctintl" |tee -a "$logfile"
	echo "Telecine match: $pcthtc" |tee -a "$logfile"
}

function process {
	inname=$(echo "$file" |cut -d. -f1)
	logtime="$(date +%s)"
	tsfile="${inname}.smap"
	echo "--------------------------------------------------"
	echo "Working on file: $file" |tee -a "$PRELOG"
	if [ $WRITELOGS = 1 ] && [ "$dryrun" != 1 ]; then
		logfile="$LOGDIR/${inname}.${logtime}.log"
		echo "Logging to: $logfile"
		if [ -f "$PRELOG" ]; then
			cat "$PRELOG" >"$logfile"
		fi
	else
		logfile="/dev/null"
	fi
	indurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$file")
	echo "Duration: $indurs" |tee -a "$logfile"
	inframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$file" |head -n 1)
	echo "Frame Count: $inframes" |tee -a "$logfile"
	infrate=$(echo "$inframes / $indurs" |bc -l)
	invres=$(ffprobe -v error -select_streams v -show_entries stream=height -of default=noprint_wrappers=1:nokey=1 "$file")
	echo "Vertical Resolution: $invres" |tee -a "$logfile"
	echo "Calculated Frame Rate: $infrate" |tee -a "$logfile"
	if [ "$step" == 3 ]; then
		if [ "$(echo "$infrate < 27" |bc -l)" -eq 1 ]; then
			nomfrate="24FPS"
		else
			nomfrate="30FPS"
		fi
	else
		pallow="$(echo "25 - ($RATELOCK * 25)" |bc -l)"
		palhigh="$(echo "25 + ($RATELOCK * 25)" |bc -l)"
		filmlow="$(echo "24 - ($RATELOCK * 24)" |bc -l)"
		filmhigh="$(echo "24 + ($RATELOCK * 24)" |bc -l)"
		vidlow="$(echo "30 - ($RATELOCK * 30)" |bc -l)"
		vidhigh="$(echo "30 + ($RATELOCK * 30)" |bc -l)"
		if [ -f "$tsfile" ]; then
			nomfrate="Mix"
			echo "Using existing segment map file: $tsfile" |tee -a "$logfile"
		elif [ "$invres" -gt "523" ] && [ "$invres" -lt "633" ]; then
			standard="PAL"
			if [ "$(echo "$infrate > $pallow" |bc -l)" -eq 1 ] && [ "$(echo "$infrate < $palhigh" |bc -l)" -eq 1 ]; then
				nomfrate="25FPS"
			else
				echo "ERROR: Unexpected PAL frame rate."
				exit 1
			fi
		elif [ "$invres" -gt "432" ] && [ "$invres" -lt "523" ]; then
			standard="NTSC"
			if [ "$(echo "$infrate >= $filmlow" |bc -l)" -eq 1 ] && [ "$(echo "$infrate <= $filmhigh" |bc -l)" -eq 1 ]; then
				nomfrate="24FPS"
			elif [ "$(echo "$infrate >= $vidlow" |bc -l)" -eq 1 ] && [ "$(echo "$infrate <= $vidhigh" |bc -l)" -eq 1 ]; then
				nomfrate="30FPS"
			else
				nomfrate="Mix"
			fi
		else
			standard="UNKNOWN"
			nomfrate="NA"
		fi
	fi
	echo "Nominal Frame Rate: $nomfrate" |tee -a "$logfile"

	if [ ! -f "$tsfile" ]; then
		checkinterlace
	fi
	if [ "$nomfrate" == "25FPS" ]; then
	# I have low confidence in PAL diagnosis.
		if [ "$(echo "$pctintl < 80" |bc -l)" -eq 1 ]; then
			echo "Diagnosis: PAL progressive video at 25FPS." |tee -a "$logfile"
			sleep 5; echo
			if [ ! "$dryrun" = 1 ]; then
				palprogressive
			else
				echo "$file: PAL Progressive 25FPS" >>diagreport.txt
			fi
		else
			echo "Diagnosis: PAL interlaced video at 25FPS." |tee -a "$logfile"
			sleep 5; echo
			if [ ! "$dryrun" = 1 ]; then
				palinterlaced
			else
				echo "$file: PAL Interlaced 25FPS" >>diagreport.txt
			fi
		fi
	elif [ "$nomfrate" == "24FPS" ]; then
		echo "Diagnosis: Soft telecined video at 24 FPS." |tee -a "$logfile"
		sleep 5; echo
		if [ ! "$dryrun" = 1 ]; then
			softtelecine
		else
			echo "$file: Soft Telecine 24FPS" >>diagreport.txt
		fi
	elif [ "$nomfrate" == "30FPS" ]; then
		if [ "$(echo "$pcthtc >= $HTCTHRESH" |bc -l)" -eq 1 ] && [ "$(echo "$pctintl > 80" |bc -l)" -eq 1 ] && [ "$step" == "9" ]; then
			echo "Diagnosis: Mixed hard telecine and interlacing." |tee -a "$logfile"
			sleep 5; echo
			if [ ! "$dryrun" = 1 ]; then
				hardmix
			else
				echo "$file: Mixed HTC and Interlacing" >>diagreport.txt
			fi
		elif [ "$(echo "$pcthtc >= $HTCTHRESH" |bc -l)" -eq 1 ]; then
			echo "Diagnosis: Hard telecined video at 24 FPS." |tee -a "$logfile"
			sleep 5; echo
			if [ ! "$dryrun" = 1 ]; then
				hardtelecine
			else
				echo "$file: Hard Telecine 24FPS" >>diagreport.txt
			fi
		elif [ "$(echo "$pctintl > $INTLTHRESH" |bc -l)" -eq 1 ]; then
			echo "Diagnosis: True, interlaced NTSC video at 30FPS." |tee -a "$logfile"
			sleep 5; echo
			if [ ! "$dryrun" == 1 ]; then
				ntscinterlaced
			else
				echo "$file: True Interlaced 30FPS" >>diagreport.txt
			fi
		elif [ "$(echo "$pcthtc < 1" |bc -l)" -eq 1 ] && [ "$(echo "$pctintl < 1" |bc -l)" -eq 1 ]; then
			echo "Diagnosis: Soft telecine with misleading frame rate." |tee -a "$logfile"
			sleep 5; echo
			if [ ! "$dryrun" == 1 ]; then
				softtelecine
			else
				echo "$file: Soft telecine bad FPS" >>diagreport.txt
			fi
		elif [ "$(echo "$pcthtc < 1" |bc -l)" -eq 1 ] && [ "$(echo "$pctintl > 20" |bc -l)" -eq 1 ]; then
			echo "Diagnosis: Soft telecined/interlaced border or transition." |tee -a "$logfile"
			sleep 5; echo
			if [ ! "$dryrun" == 1 ]; then
				ntscinterlaced
			else
				echo "$file: Partially interlaced video" >>diagreport.txt
			fi
		else
			echo "Diagnosis: Mixed hard telecined and interlaced video." |tee -a "$logfile"
			sleep 5; echo
			if [ "$step" == "1" ]; then
				if [ ! "$dryrun" = 1 ]; then
					if [ ! -f "$tsfile" ] && [ "$AUTOMAP" == 1 ]; then
						"$MAPPER" "$file"
					fi
					mixed
				else
					echo "$file: Mixed HTC+INTL" >>diagreport.txt
					echo "$file" >>maplist.txt
					if [ "$AUTOMAP" == 1 ]; then
						"$MAPPER" "$file"
					fi
				fi
			else
				ntscinterlaced
			fi
		fi
	elif [ "$nomfrate" == "Mix" ]; then
		echo "Diagnosis: Mixed progressive, telecined, and/or interlaced video." |tee -a "$logfile"
		sleep 5; echo
		if [ ! "$dryrun" = 1 ]; then
			if [ ! -f "$tsfile" ] && [ "$AUTOMAP" == 1 ]; then
				"$MAPPER" "$file"
			fi
			mixed
		else
			echo "$file: Mixed Methods" >>diagreport.txt
			echo "$file" >>maplist.txt
			if [ "$AUTOMAP" == 1 ]; then
				"$MAPPER" "$file"
			fi
		fi
	else
		if [ "$dryrun" = 1 ]; then
			echo "$file: Invalid video type" >>diagreport.txt
		fi
		echo "ERROR: This doesn't appear to be NTSC or PAL SD video." |tee -a "$logfile";echo
	fi
}

IFS=$'\n'
dryrun=0
rundir="$(pwd)"

if [ "$OUTDIR" == "CHANGEME" ]; then
	echo "ERROR: You need to set OUTDIR to your output directory at the top of the script."
	exit 1
fi

while getopts ":i:o:s:m:d:f:" flag; do
	case "${flag}" in
		i) file="${OPTARG}";;
		o) OUTDIR="${OPTARG}";;
		d) dryrun=1;;
		s) dsegsize="${OPTARG}";;
		m) dminseg="${OPTARG}";;
		f) FIXRATE="${OPTARG}";;
		*) exit 1;;
	esac
done
shift $((OPTIND-1))

if [ "$dryrun" = 1 ]; then
	LOGDIR="/dev/null"
	STEP1DIR="/dev/null"
	STEP2DIR="/dev/null"
	STEP3DIR="/dev/null"
fi
setup
reportsettings

# Export variables shared with smap
export dsegsize
export dminseg
export OUTDIR
export TEMPROOT
export TEMPDIR

if [ "$file" != "" ]; then
	if [ -f "$file" ]; then
		echo "--------------------------------------------------"
		echo "Starting drp run."
		clifile="$file"
		infile="$file"
		step=1
		process
		if [ "$MERGEMKV" == "1" ]; then
			mergeinout
		fi
		cleanup
	else
		echo "ERROR: File not found."
	fi
else
	mkvcount=$(ls -1 *.mkv |wc -l)
	if [ "$mkvcount" -ne 0 ]; then
		for file in $(ls -1 *.mkv); do
			echo "--------------------------------------------------"
			echo "Starting drp run."
			clifile="$file"
			infile="$file"
			step=1
			process
			if [ "$step" == "1" ] && [ "$SUDO_USER" ] && [ -f "outfile" ]; then
				chown "$SUDO_USER" "$outfile"
			fi
			if [ "$MERGEMKV" == "1" ]; then
				mergeinout
			fi
			cd "$rundir" || exit 1
			cleanup
		done
	else
		echo "ERROR: No MKV files found."
	fi
fi
if [ "$dryrun" == "1" ] && [ "$SUDO_USER" ] && [ -f "$rundir/diagreport.txt" ]; then
	chown "$SUDO_USER" "$rundir/diagreport.txt"
fi
if [ "$dryrun" == "1" ] && [ "$SUDO_USER" ] && [ -f "$rundir/maplist.txt" ]; then
	chown "$SUDO_USER" "$rundir/maplist.txt"
fi
