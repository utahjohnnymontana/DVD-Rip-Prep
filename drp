#!/bin/bash
# drp (DVD Rip Prep) bash script - Feb. 12 2025
#
# This script attempts to take an MKV file produced by MakeMKV from a DVD source
# and output a new file without telecine or interlacing and at the correct frame
# rate.  The goal here is to do the minimum amount of processing necessary, since
# just generally applying detelecine and deinterlacing where it isn't necessary
# might reduce the image quality.  In most cases, the script should give you a
# video that consists of more than 99% progressive frames without introducing
# motion irregularities resulting from dropped or duplicated frames.

# Settings
WRITELOGS=1
CONVPAL=1
ALLOWLOSS="0.07"
HTCTHRESH="2.5"
INTLTHRESH="50"
OUTPUTJOIN=1
OUTPUTSEGS=0
MERGEMKV=1
RATELOCK="0.0001"
STRICT=1
AUTOMAP=1
KEEPTEMP=0
FROUTS=(24 30 60 120)
MATCHTRACKS=1
DEBUG=0
DEBUGSLOW=0
MAPPER="$(dirname "$0")/smap"
OUTDIR="CHANGEME"

# Best not to change the following settings unless you know what you're doing
TEMPROOT="$OUTDIR/00DRP"
TEMPDIR="$OUTDIR/00DRP/$(date +%s)"
LOGDIR="$TEMPDIR/LOGS"
STAGE1DIR="$TEMPDIR/STAGE1"
STAGE2DIR="$TEMPDIR/STAGE2"
STAGE3DIR="$TEMPDIR/STAGE3"
STAGE4DIR="$TEMPDIR/STAGE4"
PRELOG="/tmp/prelog.$(date +%s)"

FILMFPS="$(echo "24000 / 1001" |bc -l)"
VIDFPS="$(echo "30000 / 1001" |bc -l)"
FDBLFPS="$(echo "48000 / 1001" |bc -l)"
IVIDFPS="$(echo "60000 / 1001" |bc -l)"
MAXFPS="$(echo "120000 / 1001" |bc -l)"
PALFPS="25"
IPALFPS="50"
IPALCONVFPS="$(echo "48000 / 1001" |bc -l)"
# End of settings

function setup {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function setup."
	echo "Checking dependencies..."
	if ! command -v ffmpeg >/dev/null 2>&1; then
		echo "ERROR: Can't find ffmpeg."
		exit 1
	fi
	if ! command -v ffprobe >/dev/null 2>&1; then
		echo "ERROR: Can't find ffprobe."
		exit 1
	fi
	if ! command -v mkvmerge >/dev/null 2>&1; then
		echo "ERROR: Can't find mkvmerge."
		exit 1
	fi
	if ! command -v bc >/dev/null 2>&1; then
		echo "ERROR: Can't find bc."
		exit 1
	fi
	echo "Checking directories..."
	if [ ! -d "$OUTDIR" ] && [ "$dryrun" != 1 ]; then
		echo "ERROR: OUTDIR ($OUTDIR) does not exist."
		exit 1
	fi
	if [ ! -d "$TEMPROOT" ]; then
		mkdir "$TEMPROOT" || exit 1
	fi
	if [ ! -d "$TEMPDIR" ]; then
		mkdir "$TEMPDIR" || exit 1
	fi
	if [ ! -d "$LOGDIR" ] && [ "$dryrun" != 1 ]; then
		mkdir "$LOGDIR" || exit 1
	fi
	if [ ! -d "$STAGE1DIR" ] && [ "$dryrun" != 1 ]; then
		mkdir "$STAGE1DIR" || exit 1
	fi
	if [ ! -d "$STAGE2DIR" ] && [ "$dryrun" != 1 ]; then
		mkdir "$STAGE2DIR" || exit 1
	fi
	if [ ! -d "$STAGE3DIR" ] && [ "$dryrun" != 1 ]; then
		mkdir "$STAGE3DIR" || exit 1
	fi
	if [ ! -d "$STAGE4DIR" ] && [ "$dryrun" != 1 ]; then
		mkdir "$STAGE4DIR" || exit 1
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function setup."
}

function reportsettings {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function reportsettings."
	echo "Reporting settings..."
	if [ "$WRITELOGS" = 1 ]; then
		echo "Logging is enabled." |tee -a "$PRELOG"
	else
		echo "Logging is disabled" |tee -a "$PRELOG"
	fi
	if [ "$CONVPAL" = 1 ]; then
		echo "PAL conversion is enabled." |tee -a "$PRELOG"
	else
		echo "PAL conversion is disabled" |tee -a "$PRELOG"
	fi
	if [ "$anim" = 1 ]; then
		echo "Animation mode is enabled." |tee -a "$PRELOG"
	else
		echo "Animation mode is disabled" |tee -a "$PRELOG"
	fi
	if [ "$OUTPUTJOIN" = 1 ]; then
		echo "Outputting rejoined video is enabled." |tee -a "$PRELOG"
	else
		echo "Outputting rejoined video is disabled." |tee -a "$PRELOG"
	fi
	if [ "$OUTPUTSEGS" = 1 ]; then
		echo "Outputting unjoined segments is enabled." |tee -a "$PRELOG"
	else
		echo "Outputting unjoined segments is disabled." |tee -a "$PRELOG"
	fi
	if [ "$MERGEMKV" = 1 ]; then
		echo "Merging output with the original MKV is enabled." |tee -a "$PRELOG"
	else
		echo "Merging output with the original MKV is disabled" |tee -a "$PRELOG"
	fi
	if [ "$AUTOMAP" = 1 ]; then
		echo "Automatic mapping is enabled, using $MAPPER." |tee -a "$PRELOG"
	else
		echo "Automatic mapping is disabled" |tee -a "$PRELOG"
	fi
	if [ "$dryrun" = 1 ]; then
		echo "Doing a dry run..." |tee -a "$PRELOG"
	fi
	if [ "$rerun" = 1 ]; then
		echo "Continuing previous run in directory $intmp." |tee -a "$PRELOG"
	fi
	echo "OUTDIR is $OUTDIR" |tee -a "$PRELOG"
	echo "TEMPDIR is $TEMPDIR" |tee -a "$PRELOG"
	echo "LOGDIR is $LOGDIR" |tee -a "$PRELOG"
	echo "STAGE1DIR is $STAGE1DIR" |tee -a "$PRELOG"
	echo "STAGE2DIR is $STAGE2DIR" |tee -a "$PRELOG"
	echo "STAGE3DIR is $STAGE3DIR" |tee -a "$PRELOG"
	echo "STAGE4DIR is $STAGE4DIR" |tee -a "$PRELOG"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function reportsettings."
}

function cleanup {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function cleanup."
	echo "Cleaning up temporary files and directories..."
	if [ -d "$STAGE1DIR" ] && [ "$dryrun" != 1 ]; then
		cd "$STAGE1DIR" || exit 1
		if [ "$(pwd)" == "$STAGE1DIR" ]; then
			for file in *; do
				rm -f "$file"
			done
		fi
	fi
	if [ -d "$STAGE2DIR" ] && [ "$dryrun" != 1 ]; then
		cd "$STAGE2DIR" || exit 1
		if [ "$(pwd)" == "$STAGE2DIR" ]; then
			for file in *; do
				rm -f "$file"
			done
		fi
	fi
	if [ -d "$STAGE3DIR" ] && [ "$dryrun" != 1 ]; then
		cd "$STAGE3DIR" || exit 1
		if [ "$(pwd)" == "$STAGE3DIR" ]; then
			for file in *; do
				rm -f "$file"
			done
		fi
	fi
	if [ -d "$STAGE4DIR" ] && [ "$dryrun" != 1 ]; then
		cd "$STAGE4DIR" || exit 1
		if [ "$(pwd)" == "$STAGE4DIR" ]; then
			for file in *; do
				rm -f "$file"
			done
		fi
	fi
	if [ -d "$TEMPDIR" ]; then
		cd "$TEMPDIR" || exit 1
		if [ "$(pwd)" == "$TEMPDIR" ]; then
			for file in *; do
				if [ ! -d "$file" ]; then
					rm -f "$file"
				fi
			done
		fi
	fi
	if [ -f /tmp/idet.out ]; then
		rm -f /tmp/idet.out
	fi
	if [ -f /tmp/idet.grep ]; then
		rm -f /tmp/idet.grep
	fi
	cd "$rundir" || exit 1
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function cleanup."
}

function getresolution {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function getresolution."
	local infile="$1"
	invres=$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of default=noprint_wrappers=1:nokey=1 "$infile")
	echo "Vertical Resolution: $invres" |tee -a "$logfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function getresolution."
}

function getstandard {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function getstandard."
	if [ "$clistandard" == "NTSC" ] || [ "$clistandard" == "PAL" ]; then
		standard="$clistandard"
	elif [ "$invres" -gt "573" ] && [ "$invres" -lt "579" ]; then
		standard="PAL"
	elif [ "$invres" -gt "477" ] && [ "$invres" -lt "483" ]; then
		standard="NTSC"
	else
		standard="UNKNOWN"
	fi
	echo "Video Standard: $standard" |tee -a "$logfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function getstandard."
}

function gettrueframerate {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function gettrueframerate."
	local infile="$1"
	indurs=$(ffprobe -v error -select_streams v:0 -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$infile")
	showindurs="$(printf "%.2f\n" "$indurs")"
	echo "Duration: $showindurs" |tee -a "$logfile"
	inframes=$(ffprobe -v error -select_streams v:0 -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$infile")
	echo "Frame Count: $inframes" |tee -a "$logfile"
	infrate=$(echo "$inframes / $indurs" |bc -l)
	showinfrate="$(printf "%.3f\n" "$infrate")"
	echo "Calculated Frame Rate: $showinfrate" |tee -a "$logfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function gettrueframerate."
}

function getinterlace {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function getinterlace."
	local infile="$1"
	echo "Counting interlaced frames..."  |tee -a "$logfile"
	if [ -f "$TEMPDIR/idet.out" ]; then
		rm -f "$TEMPDIR/idet.out"
	fi
	if [ -f "$TEMPDIR/idet.grep" ]; then
		rm -f "$TEMPDIR/idet.grep"
	fi
	ffmpeg -an -sn \
		-hide_banner \
		-stats \
		-filter:v idet \
		-f null - \
		-i "$infile" 2>"$TEMPDIR/idet.out"
	grep -m3 "Parsed_idet" "$TEMPDIR/idet.out" >"$TEMPDIR/idet.grep"
	idetneither=$(sed -n 1,1p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f3 |cut -dT -f1)
	idettop=$(sed -n 1,1p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f4 |cut -dB -f1)
	idetbottom=$(sed -n 1,1p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f5)
	idetsftff=$(sed -n 2,2p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f3 |cut -dB -f1)
	idetsfbff=$(sed -n 2,2p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f4 |cut -dP -f1)
	idetsfprog=$(sed -n 2,2p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f5 |cut -dU -f1)
	idetsfundet=$(sed -n 2,2p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f6)
	idetmftff=$(sed -n 3,3p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f3 |cut -dB -f1)
	idetmfbff=$(sed -n 3,3p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f4 |cut -dP -f1)
	idetmfprog=$(sed -n 3,3p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f5 |cut -dU -f1)
	idetmfundet=$(sed -n 3,3p "$TEMPDIR/idet.grep" |tr -d ' ' |cut -d: -f6)

	echo "Non-repeating Frames: $idetneither" |tee -a "$logfile"
	echo "Top Fields: $idettop" |tee -a "$logfile"
	echo "Bottom Fields: $idetbottom" |tee -a "$logfile"
	echo "TFF Fields: $idetsftff, $idetmftff"
	echo "BFF Fields: $idetsfbff, $idetmfbff"
	echo "Progressive Frames: $idetsfprog, $idetmfprog"
	echo "Undetermined Frames: $idetsfundet, $idetmfundet"

	case "$idettop" in
		''|*[!0-9]*) idettop=0 ;;
   		*) ;;
	esac
	case "$idetbottom" in
		''|*[!0-9]*) idetbottom=0 ;;
   		*) ;;
	esac
	htcfields=$((idettop + idetbottom))
	pcthtc=$(echo "($htcfields / $inframes) * 100" |bc -l)
	idetsfintl=$(echo "$idetsftff + $idetsfbff" |bc -l)
	idetmfintl=$(echo "$idetmftff + $idetmfbff" |bc -l)
	idetallintl=$(echo "$idetsfintl + $idetmfintl" |bc -l)
	intlfields=$(echo "$idetallintl / 2" |bc -l)
	pctintl=$(echo "($intlfields / $inframes) * 100" |bc -l)
	showpctintl="$(printf "%.2f\n" "$pctintl")"
	echo "Interlaced Percent: $showpctintl" |tee -a "$logfile"
	showpcthtc="$(printf "%.2f\n" "$pcthtc")"
	echo "Telecine Percent: $showpcthtc" |tee -a "$logfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function getinterlace."
}

function getnomframerate {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function getnomframerate."
	local infile="$1"
	if [ "$stage" == 3 ]; then
		if [ "$(echo "$infrate < 26" |bc -l)" -eq 1 ]; then
			nomfrate="24"
		else
			nomfrate="30"
		fi
	else
		pallow="$(echo "$PALFPS - ($RATELOCK * $PALFPS)" |bc -l)"
		palhigh="$(echo "$PALFPS + ($RATELOCK * $PALFPS)" |bc -l)"
		filmlow="$(echo "$FILMFPS - ($RATELOCK * $FILMFPS)" |bc -l)"
		filmhigh="$(echo "$FILMFPS + ($RATELOCK * $FILMFPS)" |bc -l)"
		vidlow="$(echo "$VIDFPS - ($RATELOCK * $VIDFPS)" |bc -l)"
		vidhigh="$(echo "$VIDFPS + ($RATELOCK * $VIDFPS)" |bc -l)"
		smcount=0
		if [ "$mapped" = 1 ]; then
			while read -r; do
				smcount=$((smcount + 1))
			done <"$mapfile"
		fi
		if [ "$smcount" -gt 0 ]; then
			nomfrate="Mix"
		elif [ "$standard" == "PAL" ]; then
			if [ "$(echo "$infrate > $pallow" |bc -l)" -eq 1 ] && [ "$(echo "$infrate < $palhigh" |bc -l)" -eq 1 ]; then
				if [ "$(echo "$pctintl < 10" |bc -l)" -eq 1 ]; then
					nomfrate="25"
				else
					nomfrate="50"
				fi
			fi
		elif [ "$standard" == "NTSC" ]; then
			if [ "$(echo "$infrate >= $filmlow" |bc -l)" -eq 1 ] && [ "$(echo "$infrate <= $filmhigh" |bc -l)" -eq 1 ]; then
				if [ "$(echo "$pctintl < 1" |bc -l)" -eq 1 ]; then
					nomfrate="24"
				else
					nomfrate="Mix"
				fi
			elif [ "$(echo "$infrate >= $vidlow" |bc -l)" -eq 1 ] && [ "$(echo "$infrate <= $vidhigh" |bc -l)" -eq 1 ]; then
				if [ "$(echo "$pctintl < 5" |bc -l)" -eq 1 ] && [ "$(echo "$pctintl < 1" |bc -l)" -eq 1 ]; then
					nomfrate="30"
				elif [ "$(echo "$pctintl < 80" |bc -l)" -eq 1 ] && [ "$(echo "$pctintl < 10" |bc -l)" -eq 1 ]; then
					nomfrate="Mix"
				else
					nomfrate="30"
				fi
			else
				nomfrate="Mix" 
			fi
		else
			nomfrate="Bad"
		fi
	fi
	echo "Nominal Frame Rate: $nomfrate" |tee -a "$logfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function getnomframerate."
}

function analyzentsc {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function analyzentsc."
	local infile="$1"
	if [ "$inframes" -le 6 ]; then
		echo "Diagnosis: Undiagnosable short packet." |tee -a "$logfile"
		echo "$infile,$invres,$infrate,$pctintl,$pcthtc,Short packet" >>"$diagfile"
		runmethod="passthrough"
	elif [ "$nomfrate" == "24" ]; then
		if [ "$(echo "$pctintl > 1" |bc -l)" -eq 1 ] && [ "$(echo "$inframes <= 48" |bc -l)" -eq 1 ]; then
			echo "Diagnosis: Soft telecined with interlaced borders or transitions." |tee -a "$logfile"
			echo "$infile,$invres,$infrate,$pctintl,$pcthtc,Partially interlaced video" >>"$diagfile"
			runmethod="softinterlaced"
		else
			echo "Diagnosis: Soft telecined video at 24 FPS." |tee -a "$logfile"
			echo "$infile,$invres,$infrate,$pctintl,$pcthtc,Soft Telecine 24FPS" >>"$diagfile"
			runmethod="softtelecine"
		fi
	elif [ "$nomfrate" == "30" ]; then
		if [ "$stage" = 1 ] && [ "$STRICT" = 1 ]; then
			echo "Running the mixed method because STRICT processing is enabled." |tee -a "$logfile"
			runmethod="mixed"
		elif [ "$(echo "$pcthtc >= $HTCTHRESH" |bc -l)" -eq 1 ]; then
			echo "Diagnosis: Hard telecined video at 24 FPS." |tee -a "$logfile"
			echo "$infile,$invres,$infrate,$pctintl,$pcthtc,Hard Telecine 24FPS" >>"$diagfile"
			runmethod="hardtelecine"
		elif [ "$(echo "$pctintl > $INTLTHRESH" |bc -l)" -eq 1 ]; then
			echo "Diagnosis: True, interlaced NTSC video at 30FPS." |tee -a "$logfile"
			echo "$infile,$invres,$infrate,$pctintl,$pcthtc,True Interlaced 30FPS" >>"$diagfile"
			runmethod="ntscinterlaced"
		elif [ "$(echo "$pcthtc < 1" |bc -l)" -eq 1 ] && [ "$(echo "$pctintl < 1" |bc -l)" -eq 1 ]; then
			echo "Diagnosis: Incorrectly deinterlaced hard telecine or black/still transition." |tee -a "$logfile"
			echo "$infile,$invres,$infrate,$pctintl,$pcthtc,Bad HDTC" >>"$diagfile"
			runmethod="baddetelecine"
		else
			echo "Diagnosis: Mixed/offset telecine or interlaced." |tee -a "$logfile"
			echo "$infile,$invres,$infrate,$pctintl,$pcthtc,Mixed HTC+Intl" >>"$diagfile"
			runmethod="hardtelecine"
		fi
	elif [ "$nomfrate" == "Mix" ]; then
		echo "Diagnosis: Mixed progressive, telecined, and/or interlaced video." |tee -a "$logfile"
		echo "$infile,$invres,$infrate,$pctintl,$pcthtc,Mixed Methods" >>"$diagfile"
		echo "$infile" >>maplist.txt
		runmethod="mixed"
	else
		echo "ERROR: This doesn't appear to be NTSC or PAL SD video.  You can try forcing with -p NTSC|PAL flag." |tee -a "$logfile";echo
		echo "$infile,$invres,$infrate,$pctintl,$pcthtc,Invalid video type" >>"$diagfile"
		exit 1
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function analyzentsc."
}

function analyzepal {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function analyzepal."
	local infile="$1"
	if [ "$inframes" -le 6 ]; then
		echo "Diagnosis: Undiagnosable short packet." |tee -a "$logfile"
		echo "$infile,$invres,$infrate,$pctintl,$pcthtc,Short packet" >>"$diagfile"
		runmethod="passthrough"
	elif [ "$(echo "$pctintl > 10" |bc -l)" -eq 1 ]; then
		echo "Diagnosis: PAL interlaced video at 25FPS." |tee -a "$logfile"
		echo "$infile,$invres,$infrate,$pctintl,$pcthtc,PAL Interlaced 25FPS" >>"$diagfile"
		runmethod="palinterlaced"
	else
		echo "Diagnosis: PAL progressive video at 25FPS." |tee -a "$logfile"
		echo "$infile,$invres,$infrate,$pctintl,$pcthtc,PAL Progressive 25FPS" >>"$diagfile"
		runmethod="palprogressive"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function analyzepal."
}

function mixed {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function mixed."
	local infile="$1"
	local infile2="$2"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable infile is $infile."
	[ $DEBUG = 0 ] || echo "DEBUG: Variable infile2 is $infile2."
	filmframes=0
	vidframes=0
	inname="$(echo "$infile" |cut -d. -f1)"
	reportname="${inname}-mixed-report.txt"
	reportfile="$OUTDIR/$reportname"
	echo "Working file: $infile" >>"$reportfile"
	echo >>"$reportfile"
	if [ "$stage" = 1 ]; then
		stage=2
		[ $DEBUG = 0 ] || echo "DEBUG: Variable stage is $stage."
		makerootfile "$infile"
		getmap "$infile"
		makesteppedsegs "$infile"
		prepsegments "$infile" "$rootfile"
		stage=3
		runsegments
		stage=4
		outputsegs
		segfail=0
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function mixed."
}

function checkduration {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function checkduration."
	incdfile="$1"
	outcdfile="$2"
	incddurs=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$incdfile")
	outcddurs=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$outcdfile")
	rtdiff=$(echo "$incddurs" - "$outcddurs" |bc -l)
	if [ "$(echo "$rtdiff < 0" |bc -l)" -eq 1 ]; then
		absdiff=$(echo "$rtdiff * -1" |bc -l)
	else
		absdiff="$rtdiff"
	fi
	pctdiff=$(echo "($absdiff / $incddurs) * 100" |bc -l)
	if [ "$rtdiff" == "0" ]; then
		#echo "Output duration matches input.  That's good." |tee -a "$logfile"
		tryalt=0
	else
		#echo "WARNING: Output and input durations do not match: out $outcddurs vs in $incddurs" |tee -a "$logfile"
		tryalt=1
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function checkduration."
}

function baddtc1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function baddtc1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-matched-baddtc1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "decimate" \
		-r "$infrate" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function baddtc1."
}

function baddtc2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function baddtc2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-24fps-baddtc2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "decimate" \
		-r "$FILMFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function baddtc2."
}

function baddtc2.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function baddtc2.1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-30fps-baddtc2.1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "decimate" \
		-r "$VIDFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function baddtc2.1."
}

function baddtc2.2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function baddtc2.2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-48fps-baddtc2.2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "decimate" \
		-r "$FDBLFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function baddtc2.2."
}

function baddtc2.3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function baddtc2.3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-60fps-baddtc2.3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "decimate" \
		-r "$IVIDFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function baddtc2.3."
}

function baddtc2.4 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function baddtc2.4."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-120fps-baddtc2.4-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "decimate" \
		-r "$MAXFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function baddtc2.4."
}

function baddtc3 {
	# If all else failed, this is probably just black screen, so pass it unchanged
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function baddtc6."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-passthrough-baddtc3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function baddtc3."
}

function baddetelecine {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function baddetelecine."
	local infile="$1"
	bestdiff=100
	tryalt=0
	filmframes=$((filmframes + inframes))
	if [ "$stage" -eq 1 ]; then
		methodlist=(baddtc2 baddtc2.1 baddtc2.2 baddtc2.3 baddtc2.4)
	else
		methodlist=(baddtc1 baddtc2 baddtc2.1 baddtc2.2 baddtc2.3 baddtc2.4 baddtc3)
	fi
	local submethod
	for submethod in "${methodlist[@]}"; do
		echo "Trying submethod $submethod..."
		"$submethod" "$infile"
		checkduration "$infile" "$outfile"
		if [ "$(echo "$pctdiff < $bestdiff" |bc -l)" -eq 1 ]; then
			bestfile="$outfile"
			bestdiff="$pctdiff"
			bestcddurs="$outcddurs"
			showdiff="$(printf "%.3f\n" "$rtdiff")"
		fi
		if [ "$stage" = 1 ] && [ "$(echo "$pctdiff <= $ALLOWLOSS" |bc -l)" -eq 1 ]; then
			break
		fi
		if [ "$tryalt" = 1 ] && [ "$stage" -eq 1 ] && [ "$submethod" != "baddtc2.4" ]; then
			echo "Submethod $submethod produced a bad duration: $bestcddurs vs. $incddurs"
		elif [ "$tryalt" = 1 ] && [ "$submethod" != "baddtc3" ]; then
			echo "Submethod $submethod produced a bad duration: $bestcddurs vs. $incddurs"
		elif [ "$tryalt" = 1 ]; then
			echo "No method produced a good duration.  Using the best bad result: $bestcddurs vs. $incddurs"
			echo ",$incddurs,$bestcddurs,$submethod" >>"$reportfile"
		else
			echo "Submethod $submethod produced a good duration: $bestcddurs vs. $incddurs"
			echo ",$incddurs,$bestcddurs,$submethod" >>"$reportfile"
			if [ -f /home/bill/dvdripprep/mtrack.txt ]; then echo "$submethod" >>/home/bill/dvdripprep/mtrack.txt; fi
			break
		fi
	done
	if [ "$(echo "$bestdiff > 0" |bc -l)" -eq 1 ]; then
		rename="$(echo "$bestfile" |cut -d. -f1)"
		refile="${rename}-dt${showdiff}.mkv"
		mv "$bestfile" "$refile"
		bestfile="$refile"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function baddetelecine."
}

function hdtc1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function hdtc1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-matched-hdtc1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "fieldmatch,decimate,bwdif=mode=send_frame:deint=interlaced" \
		-r "$infrate" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function hdtc1."
}

function hdtc2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function hdtc2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-24fps-hdtc2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "fieldmatch,decimate,bwdif=mode=send_frame:deint=interlaced" \
		-r "$FILMFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function hdtc2."
}

function hdtc2.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function hdtc2.1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-30fps-hdtc2.1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "fieldmatch,decimate,bwdif=mode=send_field:deint=interlaced" \
		-r "$VIDFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function hdtc2.1."
}

function hdtc2.2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function hdtc2.2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-60fps-hdtc2.2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "fieldmatch,decimate,bwdif=mode=send_field:deint=interlaced" \
		-r "$IVIDFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function hdtc2.2."
}

function hdtc2.3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function hdtc2.3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-120fps-hdtc2.3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "fieldmatch,decimate,bwdif=mode=send_field:deint=interlaced" \
		-r "$MAXFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function hdtc2.3."
}

function hdtc3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function hdtc3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-24fps-hdtc3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch=mode=pc,bwdif=mode=send_field:deint=interlaced" \
			-r "$FILMFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function hdtc3."
}

function hdtc3.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function hdtc3.1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-30fps-hdtc3.1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch=mode=pc,bwdif=mode=send_field:deint=interlaced" \
			-r "$VIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function hdtc3.1."
}

function hdtc3.2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function hdtc3.2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-60fps-hdtc3.2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch=mode=pc,bwdif=mode=send_field:deint=interlaced" \
			-r "$IVIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function hdtc3.2."
}

function hdtc3.3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function hdtc3.3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-120fps-hdtc3.3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch=mode=pc,bwdif=mode=send_field:deint=interlaced" \
			-r "$MAXFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function hdtc3.3."
}

function hdtc4 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function hdtc4."
	local infile="$1"
	if [ "$inframes" -le 24 ]; then
		# If it is short, pass it through
		inname="$(echo "$infile" |cut -d. -f1)"
		outpart="${inname}-passthrough-hdtc4a-ffv1"
		outname="${outpart}.mkv"
		outfile="$STAGE3DIR/$outname"
			ffmpeg -n \
				-hide_banner \
				-v warning \
				-stats \
				-i "$infile" \
				-an -sn \
				-c:v ffv1 "$outfile"
	else
		inname="$(echo "$infile" |cut -d. -f1)"
		outpart="${inname}-120fps-hdtc4b-ffv1"
		outname="${outpart}.mkv"
		outfile="$STAGE3DIR/$outname"
			ffmpeg -n \
				-hide_banner \
				-v warning \
				-stats \
				-i "$infile" \
				-an -sn \
				-vf "fieldmatch" \
				-r "$MAXFPS" \
				-c:v ffv1 "$outfile"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function hdtc4."
}

function hardtelecine {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function hardtelecine."
	local infile="$1"
	bestdiff=100
	tryalt=0
	filmframes=$((filmframes + inframes))
	if [ "$stage" -eq 1 ]; then
		methodlist=(hdtc2 hdtc2.1 hdtc2.2 hdtc2.3 hdtc3 hdtc3.1 hdtc3.2 hdtc3.3)
	else
		methodlist=(hdtc1 hdtc2 hdtc2.1 hdtc2.2 hdtc2.3 hdtc3 hdtc3.1 hdtc3.2 hdtc3.3 hdtc4)
	fi
	local submethod
	for submethod in "${methodlist[@]}"; do
		echo "Trying submethod $submethod..."
		"$submethod" "$infile"
		checkduration "$infile" "$outfile"
		if [ "$(echo "$pctdiff < $bestdiff" |bc -l)" -eq 1 ]; then
			bestfile="$outfile"
			bestdiff="$pctdiff"
			bestcddurs="$outcddurs"
			showdiff="$(printf "%.3f\n" "$rtdiff")"
		fi
		if [ "$stage" = 1 ] && [ "$(echo "$pctdiff <= $ALLOWLOSS" |bc -l)" -eq 1 ]; then
			break
		fi
		if [ "$tryalt" = 1 ] && [ "$stage" -eq 1 ] && [ "$submethod" != "hdtc3.3" ]; then
			echo "Submethod $submethod produced a bad duration: $bestcddurs vs. $incddurs"
		elif [ "$tryalt" = 1 ] && [ "$submethod" != "hdtc4" ]; then
			echo "Submethod $submethod produced a bad duration: $bestcddurs vs. $incddurs"
		elif [ "$tryalt" = 1 ]; then
			echo "No method produced a good duration.  Using the best bad result: $bestcddurs vs. $incddurs"
			echo ",$incddurs,$bestcddurs,$submethod" >>"$reportfile"
		else
			echo "Submethod $submethod produced a good duration: $bestcddurs vs. $incddurs"
			echo ",$incddurs,$bestcddurs,$submethod" >>"$reportfile"
			if [ -f /home/bill/dvdripprep/mtrack.txt ]; then echo "$submethod" >>/home/bill/dvdripprep/mtrack.txt; fi
			break
		fi
	done
	if [ "$(echo "$bestdiff > 0" |bc -l)" -eq 1 ]; then
		rename="$(echo "$bestfile" |cut -d. -f1)"
		refile="${rename}-dt${showdiff}.mkv"
		mv "$bestfile" "$refile"
		bestfile="$refile"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function hardtelecine."
}

function ntsci1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function ntsci1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-matched-ntsci1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "bwdif=mode=send_field" \
			-r "$infrate" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function ntsci1."
}

function ntsci2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function ntsci2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-30fps-ntsci2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "bwdif=mode=send_frame" \
			-r "$VIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function ntsci2."
}

function ntsci2.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function ntsci2.1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-60fps-ntsci2.1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "bwdif=mode=send_frame" \
			-r "$IVIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function ntsci2.1."
}

function ntsci2.2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function ntsci2.2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-120fps-ntsci2.2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "bwdif=mode=send_frame" \
			-r "$MAXFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function ntsci2.2."
}

function ntsci3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function ntsci3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-30fps-ntsci3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "bwdif=mode=send_field" \
			-r "$VIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function ntsci3."
}

function ntsci3.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function ntsci3.1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-60fps-ntsci3.1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "bwdif=mode=send_field" \
			-r "$IVIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function ntsci3.1."
}

function ntsci3.2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function ntsci3.2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-120fps-ntsci3.2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "bwdif=mode=send_field" \
			-r "$MAXFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function ntsci3.2."
}

function ntscinterlaced {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function ntscinterlaced."
	local infile="$1"
	bestdiff=100
	tryalt=0
	vidframes=$((vidframes + inframes))
	if [ "$stage" -eq 1 ]; then
		methodlist=(ntsci2 ntsci2.1 ntsci2.2 ntsci3 ntsci3.1 ntsci3.2)
	else
		methodlist=(ntsci1 ntsci2 ntsci2.1 ntsci2.2 ntsci3 ntsci3.1 ntsci3.2)
	fi
	local submethod
	for submethod in "${methodlist[@]}"; do
		echo "Trying submethod $submethod..."
		"$submethod" "$infile"
		checkduration "$infile" "$outfile"
		if [ "$(echo "$pctdiff < $bestdiff" |bc -l)" -eq 1 ]; then
			bestfile="$outfile"
			bestdiff="$pctdiff"
			bestcddurs="$outcddurs"
			showdiff="$(printf "%.3f\n" "$rtdiff")"
		fi
		if [ "$stage" = 1 ] && [ "$(echo "$pctdiff <= $ALLOWLOSS" |bc -l)" -eq 1 ]; then
			break
		fi
		if [ "$tryalt" = 1 ] && [ "$submethod" != "ntsci3.2" ]; then
			echo "Submethod $submethod produced a bad duration: $bestcddurs vs. $incddurs"
		elif [ "$tryalt" = 1 ]; then
			echo "No method produced a good duration.  Using the best bad result: $bestcddurs vs. $incddurs"
			echo ",$incddurs,$bestcddurs,$submethod" >>"$reportfile"
		else
			echo "Submethod $submethod produced a good duration: $bestcddurs vs. $incddurs"
			echo ",$incddurs,$bestcddurs,$submethod" >>"$reportfile"
			if [ -f /home/bill/dvdripprep/mtrack.txt ]; then echo "$submethod" >>/home/bill/dvdripprep/mtrack.txt; fi
			break
		fi
	done
	if [ "$(echo "$bestdiff > 0" |bc -l)" -eq 1 ]; then
		rename="$(echo "$bestfile" |cut -d. -f1)"
		refile="${rename}-dt${showdiff}.mkv"
		mv "$bestfile" "$refile"
		bestfile="$refile"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function ntscinterlaced."
}

function palint2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function palint2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-24fps_pal2ntsc-palint2-ffv1.mkv"
	finfile="$OUTDIR/$outpart"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-r "$FILMFPS" \
		-i "$infile" \
		-an -sn \
		-vf "bwdif=mode=send_frame" \
		-r "$FILMFPS" \
		-c:v ffv1 "$finfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function palint2."
}

function palint2.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function palint2.1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-48fps_pal2ntsc-palint2.1-ffv1.mkv"
	finfile="$OUTDIR/$outpart"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-r "$FILMFPS" \
		-i "$infile" \
		-an -sn \
		-vf "bwdif=mode=send_field" \
		-r "$IPALCONVFPS" \
		-c:v ffv1 "$finfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function palint2.1."
}

function palint1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function palint1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-25fps_pal-palint1-ffv1.mkv"
	finfile="$OUTDIR/$outpart"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "bwdif=mode=send_frame" \
		-r "$PALFPS" \
		-c:v ffv1 "$finfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function palint1."
}

function palint1.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function palint1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-50fps_pal-palint1.1-ffv1.mkv"
	finfile="$OUTDIR/$outpart"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "bwdif=mode=send_field" \
		-r "$IPALFPS" \
		-c:v ffv1 "$finfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function palint1."
}

function palinterlaced {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function palinterlaced."
	infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	if [ $CONVPAL = 1 ]; then
		echo;echo "Converting 25FPS PAL interlaced video to 24 and 48FPS..."
		echo "Converting video with blended fields..."
		palint2 "$infile"
		checkduration "$rundir/$orgfile" "$finfile"
		echo "Finalized time difference: In: $incddurs Out: $outcddurs."
		matchtracks "$orgfile" "$finfile"
		mergeinout "$rundir/$orgfile" "$finfile"
		echo "Converting video with intact fields..."
		palint2.1 "$infile"
		checkduration "$rundir/$orgfile" "$finfile"
		echo "Finalized time difference: In: $incddurs Out: $outcddurs."
		matchtracks "$orgfile" "$finfile"
		mergeinout "$rundir/$orgfile" "$finfile"
	else
		echo "Converting 25FPS PAL interlaced video to 25 and 50FPS..."
		echo "Converting video with blended fields..."
		palint1 "$infile"
		checkduration "$rundir/$orgfile" "$finfile"
		echo "Finalized time difference: In: $incddurs Out: $outcddurs."
		matchtracks "$orgfile" "$finfile"
		mergeinout "$rundir/$orgfile" "$finfile"
		echo "Converting video with intact fields..."
		palint1.1 "$infile"
		checkduration "$rundir/$orgfile" "$finfile"
		echo "Finalized time difference: In: $incddurs Out: $outcddurs."
		matchtracks "$orgfile" "$finfile"
		mergeinout "$rundir/$orgfile" "$finfile"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function palinterlaced."
}

function palprog2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function palprog2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-24fps_pal2ntsc-palprog2-ffv1.mkv"
	finfile="$OUTDIR/$outpart"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-r "$FILMFPS" \
		-i "$infile" \
		-an -sn \
		-c:v ffv1 "$finfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function palprog2."
}

function palprog1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function palprog1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-25fps_pal-palprog1-ffv1.mkv"
	finfile="$OUTDIR/$outpart"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-r "$PALFPS" \
		-c:v ffv1 "$finfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function palprog1."
}

function palprogressive {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function palprogressive."
	infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	if [ $CONVPAL = 1 ]; then
		echo;echo "Converting 25FPS PAL progressive video to 24FPS..."
		echo "Converting video..."
		palprog2 "$infile"
		checkduration "$rundir/$orgfile" "$finfile"
		echo "Finalized time difference: In: $incddurs Out: $outcddurs."
		matchtracks "$orgfile" "$finfile"
		mergeinout "$rundir/$orgfile" "$finfile"
	else
		echo "Converting 25FPS PAL interlaced video at 25FPS..."
		palprog1 "$infile"
		checkduration "$rundir/$orgfile" "$finfile"
		echo "Finalized time difference: In: $incddurs Out: $outcddurs."
		matchtracks "$orgfile" "$finfile"
		mergeinout "$rundir/$orgfile" "$finfile"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function palprogressive."
}

function passthrough {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function passthrough."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-passthrough-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-c:v ffv1 "$outfile"
		echo ",-,-,passthrough" >>"$reportfile"
		if [ -f /home/bill/dvdripprep/mtrack.txt ]; then echo "passthrough" >>/home/bill/dvdripprep/mtrack.txt; fi
	bestfile="$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function passthrough."
}

function sdtc1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-matched-sdtc1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-r "$infrate" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc1."
}

function sdtc2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-24fps-sdtc2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-r "$FILMFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc2."
}

function sdtc2.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc2.1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-30fps-sdtc2.1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-r "$VIDFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc2.1."
}

function sdtc2.2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc2.2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-48fps-sdtc2.2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-r "$FDBLFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc2.2."
}

function sdtc2.3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc2.3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-60fps-sdtc2.3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-r "$IVIDFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc2.3."
}

function sdtc2.4 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc2.4."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-120fps-sdtc2.4-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-r "$MAXFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc2.4."
}

function sdtc3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-24fps-sdtc3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch,bwdif=mode=send_frame:deint=interlaced" \
			-r "$FILMFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc3."
}

function sdtc3.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc3.1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-30fps-sdtc3.1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch,bwdif=mode=send_frame:deint=interlaced" \
			-r "$VIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc3.1."
}

function sdtc3.2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc3.2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-60fps-sdtc3.2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch,bwdif=mode=send_frame:deint=interlaced" \
			-r "$IVIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc3.2."
}

function sdtc3.3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc3.3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-120fps-sdtc3.3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch,bwdif=mode=send_frame:deint=interlaced" \
			-r "$MAXFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc3.3."
}

function sdtc4 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc4."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-24fps-sdtc4-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch,bwdif=mode=send_field:deint=interlaced" \
			-r "$FILMFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc4."
}

function sdtc4.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc4.1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-30fps-sdtc4.1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch,bwdif=mode=send_field:deint=interlaced" \
			-r "$VIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc4.1."
}

function sdtc4.2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc4.2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-60fps-sdtc4.2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch,bwdif=mode=send_field:deint=interlaced" \
			-r "$IVIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc4.2."
}

function sdtc4.3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc4.3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-120fps-sdtc4.3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch,bwdif=mode=send_field:deint=interlaced" \
			-r "$MAXFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc4.3."
}

function sdtc5 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc5."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-24fps-sdtc5-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
	ffmpeg -n \
		-hide_banner \
		-v warning \
		-stats \
		-i "$infile" \
		-an -sn \
		-vf "fieldmatch,bwdif=mode=send_field:deint=interlaced,fps=120" \
		-r "$FILMFPS" \
		-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdtc5."
}

function softtelecine {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function softtelecine."
	local infile="$1"
	bestdiff=100
	tryalt=0
	filmframes=$((filmframes + inframes))
	if [ "$stage" -eq 1 ]; then
		methodlist=(sdtc2 sdtc2.1 sdtc2.2 sdtc2.3 sdtc2.4 sdtc3 sdtc3.1 sdtc3.2 sdtc3.3 sdtc4 sdtc4.1 sdtc4.2 sdtc4.3)
	else
		methodlist=(sdtc1 sdtc2 sdtc2.1 sdtc2.2 sdtc2.3 sdtc2.4 sdtc3 sdtc3.1 sdtc3.2 sdtc3.3 sdtc4 sdtc4.1 sdtc4.2 sdtc4.3 sdtc5)
	fi
	local submethod
	for submethod in "${methodlist[@]}"; do
		echo "Trying submethod $submethod..."
		"$submethod" "$infile"
		checkduration "$infile" "$outfile"
		if [ "$(echo "$pctdiff < $bestdiff" |bc -l)" -eq 1 ]; then
			bestfile="$outfile"
			bestdiff="$pctdiff"
			bestcddurs="$outcddurs"
			showdiff="$(printf "%.3f\n" "$rtdiff")"
		fi
		if [ "$stage" = 1 ] && [ "$(echo "$pctdiff <= $ALLOWLOSS" |bc -l)" -eq 1 ]; then
			break
		fi
		if [ "$tryalt" = 1 ] && [ "$stage" -eq 1 ] && [ "$submethod" != "sdtc4.3" ]; then
			echo "Submethod $submethod produced a bad duration: $bestcddurs vs. $incddurs"
		elif [ "$tryalt" = 1 ] && [ "$submethod" != "sdtc5" ]; then
			echo "Submethod $submethod produced a bad duration: $bestcddurs vs. $incddurs"
		elif [ "$tryalt" = 1 ]; then
			echo "No method produced a good duration.  Using the best bad result: $bestcddurs vs. $incddurs"
			echo ",$incddurs,$bestcddurs,$submethod" >>"$reportfile"
		else
			echo "Submethod $submethod produced a good duration: $bestcddurs vs. $incddurs"
			echo ",$incddurs,$bestcddurs,$submethod" >>"$reportfile"
			if [ -f /home/bill/dvdripprep/mtrack.txt ]; then echo "$submethod" >>/home/bill/dvdripprep/mtrack.txt; fi
			break
		fi
	done
	if [ "$(echo "$bestdiff > 0" |bc -l)" -eq 1 ]; then
		rename="$(echo "$bestfile" |cut -d. -f1)"
		refile="${rename}-dt${showdiff}.mkv"
		mv "$bestfile" "$refile"
		bestfile="$refile"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function softtelecine."
}

function sdi1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdi1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-matched-sdi1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch=mode=pc,bwdif=mode=send_field:deint=interlaced" \
			-r "$infrate" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdi1."
}

function sdi2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdi2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-24fps-sdi2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch=mode=pc,bwdif=mode=send_field:deint=interlaced" \
			-r "$FILMFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdi2."
}

function sdi2.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdi2.1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-30fps-sdi2.1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch,bwdif=mode=send_field:deint=interlaced" \
			-r "$VIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdi2.1."
}

function sdi2.2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdi2.2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-48fps-sdi2.2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch=mode=pc,bwdif=mode=send_field:deint=interlaced" \
			-r "$FDBLFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdi2.2."
}

function sdi2.3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc2.3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-60fps-sdi2.3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch,bwdif=mode=send_field:deint=interlaced" \
			-r "$IVIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdi2.3."
}

function sdi2.4 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdtc2.4."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-120fps-sdi2.4-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch,bwdif=mode=send_field:deint=interlaced" \
			-r "$MAXFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdi2.4."
}

function sdi3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdi3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-24fps-sdi3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch=mode=pc,bwdif=mode=send_field:deint=all" \
			-r "$FILMFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdi3."
}

function sdi3.1 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdi3.1."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-30fps-sdi3.1-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch=mode=pc,bwdif=mode=send_field:deint=all" \
			-r "$VIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdi3.1."
}

function sdi3.2 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdi3.2."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-60fps-sdi3.2-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch=mode=pc,bwdif=mode=send_field:deint=all" \
			-r "$IVIDFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdi3.2."
}

function sdi3.3 {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdi3.3."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-120fps-sdi3.3-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-vf "fieldmatch=mode=pc,bwdif=mode=send_field:deint=all" \
			-r "$MAXFPS" \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdi3.3."
}

function sdi4 {
# If all else fails, pass it through unchanged
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function sdi4."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outpart="${inname}-pass-sdi4-ffv1"
	outname="${outpart}.mkv"
	outfile="$STAGE3DIR/$outname"
		ffmpeg -n \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-an -sn \
			-c:v ffv1 "$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function sdi4."
}

function softinterlaced {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function softinterlaced."
	local infile="$1"
	bestdiff=100
	tryalt=0
	filmframes=$((filmframes + inframes))
	methodlist=(sdi1 sdi2 sdi2.1 sdi2.2 sdi2.3 sdi2.4 sdi3 sdi3.1 sdi3.2 sdi3.3 sdi4)
	local submethod
	for submethod in "${methodlist[@]}"; do
		echo "Trying submethod $submethod..."
		"$submethod" "$infile"
		checkduration "$infile" "$outfile"
		if [ "$(echo "$pctdiff < $bestdiff" |bc -l)" -eq 1 ]; then
			bestfile="$outfile"
			bestdiff="$pctdiff"
			bestcddurs="$outcddurs"
			showdiff="$(printf "%.3f\n" "$rtdiff")"
		fi
		if [ "$stage" = 1 ] && [ "$(echo "$pctdiff <= $ALLOWLOSS" |bc -l)" -eq 1 ]; then
			break
		fi
		if [ "$tryalt" = 1 ] && [ "$submethod" != "sdi4" ]; then
			echo "Submethod $submethod produced a bad duration: $bestcddurs vs. $incddurs"
		elif [ "$tryalt" = 1 ]; then
			echo "No method produced a good duration.  Using the best bad result: $bestcddurs vs. $incddurs"
			echo ",$incddurs,$bestcddurs,$submethod" >>"$reportfile"
		else
			echo "Submethod $submethod produced a good duration: $bestcddurs vs. $incddurs"
			echo ",$incddurs,$bestcddurs,$submethod" >>"$reportfile"
			if [ -f /home/bill/dvdripprep/mtrack.txt ]; then echo "$submethod" >>/home/bill/dvdripprep/mtrack.txt; fi
			break
		fi
	done
	if [ "$(echo "$bestdiff > 0" |bc -l)" -eq 1 ]; then
		rename="$(echo "$bestfile" |cut -d. -f1)"
		refile="${rename}-dt${showdiff}.mkv"
		mv "$bestfile" "$refile"
		bestfile="$refile"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function softinterlaced."
}

function makerootfile {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function makerootfile."
	local infile="$1"
	inname="$(echo "$infile" |cut -d. -f1)"
	outname="${inname}-video-stage1-ffv1-step0.mkv"
	outfile="$STAGE1DIR/$outname"
	if [ ! -f "$outfile" ]; then
		echo;echo "Running stage 1 (conversion to FFV1)..." |tee -a "$logfile"
		ffmpeg -n \
			-an -sn \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-c:v ffv1 "$outfile"
	else
		echo "Step 1 conversion already exists, so using it." |tee -a "$logfile"
	fi
	rootfile="$outfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function makerootfile."
}

function getmap {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function getmap."
	local infile="$1"
	if [ "$mapped" = 0 ]; then
		if [ "$AUTOMAP" = 1 ]; then
			bash "$MAPPER" "$infile"
			mapped=1
			echo;echo "Resuming drp run..."
		fi
	else
		echo "Using existing segment map file: $mapfile" |tee -a "$logfile"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function getmap."
}

function outputsegs {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function outputsegs."
	if [ "$OUTPUTSEGS" == "1" ]; then
		echo "Outputting separate segment files..."
		cp "$STAGE3DIR/*.mkv" "$OUTDIR"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function outputsegs."
}

function runsegments {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function runsegments."
	cd "$STAGE2DIR" || exit 1
	mkvcount=0
	for mkvfile in *.mkv; do
		mkvcount=$((mkvcount + 1))
	done
	if [ "$mkvcount" -ne 0 ]; then
		filmframes=0
		vidframes=0
		echo;echo "Running stage 3 (processing segments)..."
		local segfile
		segline=0
		for segfile in *segment*.mkv; do
			if [ "$segfail" != 1 ]; then
				echo;echo "Working on $segfile..."
				segline=$((segline + 1))
				smapline="$(sed -n ${segline}p "$mapfile")"
				echo -n "segment $segline,$smapline" >>"$reportfile"
				gettrueframerate "$segfile"
				getinterlace "$segfile"
				getnomframerate "$segfile"
				if [ "$standard" == "PAL" ]; then
					analyzepal "$segfile"
				else
					analyzentsc "$segfile"
				fi
				"$runmethod" "$segfile"
				echo "file '$bestfile'" >>"$STAGE3DIR/concat.txt"
			fi
		done
	else
		echo "ERROR: No MKV files found."
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function runsegments."
}

function finalize {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function finalize."
	local infile="$1"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable infile is $infile."
	local bestfile="$2"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable bestfile is $bestfile."
	cd "$STAGE3DIR" ||exit 1
	echo;echo "Running stage 4 (Finalizing and rejoining tracks)..."
	if [ -f concat.txt ]; then
		if [ "$FROUTS" == "OFF" ] && [ "$OUTPUTJOIN" == "1" ] && [ "$segfail" != 1 ]; then
			inname="$(echo "$infile" |cut -d. -f1)"
			if [ "$filmframes" -gt 0 ] && [ "$vidframes" -eq 0 ]; then
				outfps="$FILMFPS"
				fpslabel="24FPS"
				echo;echo "All segments are film rate, so outputting at 24 FPS."
			elif [ "$filmframes" -eq 0 ] && [ "$vidframes" -gt 0 ]; then
				outfps="$IVIDFPS"
				fpslabel="60FPS"
				echo;echo "All segments are video rate, so outputting at 60 FPS."
			else
				outfps="$MAXFPS"
				fpslabel="120FPS"
				echo;echo "Segments mix film and video rates, so outputting at 120 FPS."
			fi
			finname="$(echo "$orgfile" |cut -d. -f1)"
			finfile="$OUTDIR/${finname}-$fpslabel-rejoined.mkv"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable inname is $inname."
			echo;echo "Rejoining segments and outputting to $finfile..."
			[ $DEBUG = 0 ] || echo "DEBUG: Variable outfps is $outfps."
			outname="${inname}-$fpslabel-rejoined.mkv"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable outname is $outname."
			outfile="$OUTDIR/$outname"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable outfile is $outfile."
			[ $DEBUG = 0 ] || set -x
			set -m
			ffmpeg -n \
				-hide_banner \
				-v warning \
				-stats \
				-f concat \
				-safe 0 \
				-i concat.txt \
				-r "$outfps" \
				-c:v ffv1 "$finfile"
			set +m
			[ $DEBUG = 0 ] || set +x
			checkduration "$rundir/$orgfile" "$finfile"
			echo "Finalized time difference: In: $incddurs Out: $outcddurs." |tee -a "$reportfile"
			if [ "$MERGEMKV" == "1" ] && [ "$standard" != "PAL" ]; then
				if [ "$MATCHTRACKS" -eq 1 ]; then
					matchtracks "$orgfile" "$finfile"
				fi
				mergeinout "$rundir/$orgfile" "$finfile"
			fi
			[[ -v SUDO_USER ]] && chown "$SUDO_USER" "$finfile"
		elif [ "$FROUTS" != "OFF" ] && [ "$OUTPUTJOIN" == "1" ] && [ "$segfail" != 1 ]; then
			echo;echo "Outputting at multiple frame rates..."
			for frate in "${FROUTS[@]}"; do
				case "$frate" in
					24) fpslabel="24FPS";outfps="$FILMFPS";;
 					30) fpslabel="30FPS";outfps="$VIDFPS";;
 					48) fpslabel="48FPS";outfps="$FDBLFPS";;
					60) fpslabel="60FPS";outfps="$IVIDFPS";;
					120) fpslabel="120FPS";outfps="$MAXFPS";;
					*) exit 1;;
				esac
				inname="$(echo "$infile" |cut -d. -f1)"
				[ $DEBUG = 0 ] || echo "DEBUG: Variable inname is $inname."
				outname="${inname}-$fpslabel-rejoined.mkv"
				[ $DEBUG = 0 ] || echo "DEBUG: Variable outname is $outname."
				outfile="$OUTDIR/$outname"
				[ $DEBUG = 0 ] || echo "DEBUG: Variable outfile is $outfile."
				finname="$(echo "$orgfile" |cut -d. -f1)"
				finfile="$OUTDIR/${finname}-$fpslabel-rejoined.mkv"
				echo;echo "Rejoining segments and outputting at ${frate}FPS to $finfile..."
				ffmpeg -n \
					-hide_banner \
					-v warning \
					-stats \
					-f concat \
					-safe 0 \
					-i concat.txt \
					-r "$outfps" \
					-c:v ffv1 "$finfile"
				checkduration "$rundir/$orgfile" "$finfile"
				echo "Finalized time difference: In: $incddurs Out: $outcddurs." |tee -a "$reportfile"
				if [ "$MERGEMKV" == "1" ] && [ "$standard" != "PAL" ]; then
					if [ "$MATCHTRACKS" -eq 1 ]; then
						matchtracks "$orgfile" "$finfile"
					fi
					mergeinout "$rundir/$orgfile" "$finfile"
				fi
				[[ -v SUDO_USER ]] && chown "$SUDO_USER" "$finfile"
			done
		else
			echo "ERROR: Unexpected concatenation failure."
		fi
		echo >>"$reportfile"
	else
		inname="$(basename "$bestfile" |cut -d. -f1)"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable inname is $inname."
		finname="${inname}-final.mkv"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable outname is $outname."
		finfile="$OUTDIR/$finname"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable outfile is $outfile."
		echo;echo "Moving output file to $finfile..."
		mv "$bestfile" "$finfile"
		checkduration "$rundir/$orgfile" "$finfile"
		if [ "$MERGEMKV" == "1" ] && [ "$standard" != "PAL" ]; then
			if [ "$MATCHTRACKS" -eq 1 ]; then
				matchtracks "$orgfile" "$finfile"
			fi
			mergeinout "$rundir/$orgfile" "$finfile"
		fi
		[[ -v SUDO_USER ]] && chown "$SUDO_USER" "$outfile"
	fi

	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function finalize."
}

function makesteppedsegs {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function makesteppedsegs."
	local infile="$1"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable infile is $infile."
	inname="$(echo "$infile" |cut -d. -f1)"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable inname is $inname."
	[ $DEBUG = 0 ] || echo "DEBUG: Variable mapped is $mapped."
	[ $DEBUG = 0 ] || echo "DEBUG: Variable mapfile is $mapfile."
	if [ "$mapped" = 1 ]; then
		while read -r; do
			mapcount=$((mapcount + 1))
		done <"$mapfile"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Variable mapcount is $mapcount."
	# cut into a series of files at 10000 offsets
	local numcuts
	local donecuts
	numcuts="$(echo "$inframes / 10000" |bc -l |cut -d. -f1)"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable numcuts is $numcuts."
	segthresh=$((numcuts * 3))
	[ $DEBUG = 0 ] || echo "DEBUG: Variable segthresh is $segthresh."
	donecuts=0
	[ $DEBUG = 0 ] || echo "DEBUG: Variable rundir is $rundir."
	nonstep=0
	cd "$rundir" || exit 1
	if [ "$mapcount" -gt "$segthresh" ]; then
		echo "Experiment: Making stepped cuts to speed up the segment trimming..."
		while [ "$donecuts" -lt "$numcuts" ]; do
			donecuts="$((donecuts + 1))"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable donecuts is $donecuts."
			stepname="${inname}-video-stage1-ffv1-step${donecuts}.mkv"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable stepname is $stepname."
			stepfile="$STAGE1DIR/$stepname"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable stepfile is $stepfile."
			startframe="$((donecuts * 10000 - 1))"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable startframe is $startframe."
			endframe="$((inframes + 1))"
			echo "Cutting stepped segment $donecuts of $numcuts..."
			[ $DEBUG = 0 ] || set -x
			set -m
			ffmpeg -n -nostdin \
				-an -sn \
				-hide_banner \
				-v warning \
				-stats \
				-i "$infile" \
				-vf "trim=start_frame=$startframe:end_frame=$endframe,setpts=PTS-STARTPTS" \
				-reset_timestamps 1 \
				-vcodec ffv1 "$stepfile"
			set +m
			[ $DEBUG = 0 ] || set +x
		done
	else
		nonstep=1
	fi
	stepped=1
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function makesteppedsegs."
}

function prepsegments {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function prepsegments."
	local infile="$1"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable infile is $infile."
	inname="$(echo "$infile" |cut -d. -f1)"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable inname is $inname."
	local rootfile="$2"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable rootfile is $rootfile."

	echo;echo "Running stage 2 (division into segments)..." |tee -a "$logfile"
	segstatus=0
	cd "$STAGE2DIR" || exit 1
	for file in *.mkv; do
		segstatus=$((segstatus + 1))
	done
	[ $DEBUG = 0 ] || echo "DEBUG: Variable segstatus is $segstatus."
	cd "$rundir" || exit 1
	if [ "$mapped" = 1 ] && [ "$segstatus" -gt "0" ]; then
		segindex=1
		numsegs=$(wc -l <"$mapfile")
		local segment
		[ $DEBUG = 0 ] || echo "DEBUG: Variable numsegs is $numsegs."
		while read -r segment; do
			startframe="$(echo "$segment" |cut -d, -f1)"
			endframe="$(echo "$segment" |cut -d, -f2)"
			if [ "$startframe" == "start" ]; then
				startframe=0
			fi
			if [ "$endframe" == "end" ]; then
				endframe=$((inframes + 1))
			fi
			[ $DEBUG = 0 ] || echo "DEBUG: Variable startframe is $startframe."
			[ $DEBUG = 0 ] || echo "DEBUG: Variable endframe is $endframe."
			# Experiment to see if trims from stepped files will be faster
			# There has to be a better way to do this
			if [ "$nonstep" != 1 ]; then
				if [ "$startframe" -ge 10000 ] && [ "$startframe" -lt 20000 ]; then
					startframeadj="$((startframe - 10000))"
					endframeadj="$((endframe - 10000))"
					outname="${inname}-video-stage1-ffv1-step1.mkv"
				elif [ "$startframe" -ge 20000 ] && [ "$startframe" -lt 30000 ]; then
					startframeadj="$((startframe - 20000))"
					endframeadj="$((endframe - 20000))"
					outname="${inname}-video-stage1-ffv1-step2.mkv"
				elif [ "$startframe" -ge 30000 ] && [ "$startframe" -lt 40000 ]; then
					startframeadj="$((startframe - 30000))"
					endframeadj="$((endframe - 30000))"
					outname="${inname}-video-stage1-ffv1-step3.mkv"
				elif [ "$startframe" -ge 40000 ] && [ "$startframe" -lt 50000 ]; then
					startframeadj="$((startframe - 40000))"
					endframeadj="$((endframe - 40000))"
					outname="${inname}-video-stage1-ffv1-step4.mkv"
				elif [ "$startframe" -ge 50000 ] && [ "$startframe" -lt 60000 ]; then
					startframeadj="$((startframe - 50000))"
					endframeadj="$((endframe - 50000))"
					outname="${inname}-video-stage1-ffv1-step5.mkv"
				elif [ "$startframe" -ge 60000 ] && [ "$startframe" -lt 70000 ]; then
					startframeadj="$((startframe - 60000))"
					endframeadj="$((endframe - 60000))"
					outname="${inname}-video-stage1-ffv1-step6.mkv"
				elif [ "$startframe" -ge 70000 ] && [ "$startframe" -lt 80000 ]; then
					startframeadj="$((startframe - 70000))"
					endframeadj="$((endframe - 70000))"
					outname="${inname}-video-stage1-ffv1-step7.mkv"
				elif [ "$startframe" -ge 80000 ] && [ "$startframe" -lt 90000 ]; then
					startframeadj="$((startframe - 80000))"
					endframeadj="$((endframe - 80000))"
					outname="${inname}-video-stage1-ffv1-step8.mkv"
				elif [ "$startframe" -ge 90000 ] && [ "$startframe" -lt 100000 ]; then
					startframeadj="$((startframe - 90000))"
					endframeadj="$((endframe - 90000))"
					outname="${inname}-video-stage1-ffv1-step9.mkv"
				elif [ "$startframe" -ge 100000 ] && [ "$startframe" -lt 110000 ]; then
					startframeadj="$((startframe - 100000))"
					endframeadj="$((endframe - 100000))"
					outname="${inname}-video-stage1-ffv1-step10.mkv"
				elif [ "$startframe" -ge 110000 ] && [ "$startframe" -lt 120000 ]; then
					startframeadj="$((startframe - 110000))"
					endframeadj="$((endframe - 110000))"
					outname="${inname}-video-stage1-ffv1-step11.mkv"
				elif [ "$startframe" -ge 120000 ] && [ "$startframe" -lt 130000 ]; then
					startframeadj="$((startframe - 120000))"
					endframeadj="$((endframe - 120000))"
					outname="${inname}-video-stage1-ffv1-step12.mkv"
				elif [ "$startframe" -ge 130000 ] && [ "$startframe" -lt 140000 ]; then
					startframeadj="$((startframe - 130000))"
					endframeadj="$((endframe - 130000))"
					outname="${inname}-video-stage1-ffv1-step13.mkv"
				elif [ "$startframe" -ge 140000 ] && [ "$startframe" -lt 150000 ]; then
					startframeadj="$((startframe - 140000))"
					endframeadj="$((endframe - 140000))"
					outname="${inname}-video-stage1-ffv1-step14.mkv"
				elif [ "$startframe" -ge 150000 ] && [ "$startframe" -lt 160000 ]; then
					startframeadj="$((startframe - 150000))"
					endframeadj="$((endframe - 150000))"
					outname="${inname}-video-stage1-ffv1-step15.mkv"
				elif [ "$startframe" -ge 160000 ] && [ "$startframe" -lt 170000 ]; then
					startframeadj="$((startframe - 160000))"
					endframeadj="$((endframe - 160000))"
					outname="${inname}-video-stage1-ffv1-step16.mkv"
				elif [ "$startframe" -ge 170000 ] && [ "$startframe" -lt 180000 ]; then
					startframeadj="$((startframe - 170000))"
					endframeadj="$((endframe - 170000))"
					outname="${inname}-video-stage1-ffv1-step17.mkv"
				elif [ "$startframe" -ge 180000 ] && [ "$startframe" -lt 190000 ]; then
					startframeadj="$((startframe - 180000))"
					endframeadj="$((endframe - 180000))"
					outname="${inname}-video-stage1-ffv1-step18.mkv"
				elif [ "$startframe" -ge 190000 ] && [ "$startframe" -lt 200000 ]; then
					startframeadj="$((startframe - 190000))"
					endframeadj="$((endframe - 190000))"
					outname="${inname}-video-stage1-ffv1-step19.mkv"
				else
					startframeadj="$startframe"
					endframeadj="$endframe"
					outname="${inname}-video-stage1-ffv1-step0.mkv"
				fi
			else
				startframeadj="$startframe"
				endframeadj="$endframe"
				outname="${inname}-video-stage1-ffv1-step0.mkv"
			fi
			[ $DEBUG = 0 ] || echo "DEBUG: Variable startframeadj is $startframeadj."
			[ $DEBUG = 0 ] || echo "DEBUG: Variable endframeadj is $endframeadj."
			[ $DEBUG = 0 ] || echo "DEBUG: Variable outname is $outname."
			outfile="$STAGE1DIR/$outname"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable outfile is $outfile."
			if [ "$segindex" -lt 10 ]; then
				segname="$inname-segment-00$segindex-ffv1.mkv"
			elif [ "$segindex" -lt 100 ]; then
				segname="$inname-segment-0$segindex-ffv1.mkv"
			else
				segname="$inname-segment-$segindex-ffv1.mkv"
			fi
			[ $DEBUG = 0 ] || echo "DEBUG: Variable segname is $segname."
			segfile="$STAGE2DIR/$segname"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable segfile is $segfile."
			echo "Cutting segment $segindex of $numsegs from $startframe (inclusive) to $endframe (exclusive)..."
			[ $DEBUG = 0 ] || set -x
			set -m
			ffmpeg -n -nostdin \
				-hide_banner \
				-v warning \
				-stats \
				-i "$outfile" \
				-vf "trim=start_frame=$startframeadj:end_frame=$endframeadj, \
					setpts=PTS-STARTPTS" \
				-vcodec ffv1 "$segfile"
			set +m
			[ $DEBUG = 0 ] || set +x
			segindex=$((segindex + 1))
			[ $DEBUG = 0 ] || echo "DEBUG: Variable segindex is $segindex."
		done <"$mapfile"
	else
		echo "Using existing Step 2 segments." |tee -a "$logfile"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function prepsegments."
}

function matchtracks {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function mmatchtracks."
	local infile="$1"
	outbase=$(basename "$finfile")
	outname="$(echo "$outbase" |cut -d. -f1)"
	amod=$(echo "$incddurs" / "$outcddurs" |bc -l)
	smod=$(echo "$outcddurs" / "$incddurs" |bc -l)
	acount=0
	echo "Adjusing audio tracks..."
	for atrack in $(ffprobe "$rundir/$infile" -v warning -show_entries stream=index -select_streams a -of compact=p=0:nk=1); do
		codec=$(ffprobe "$rundir/$infile" -v error -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1)
		outfile="$STAGE4DIR/$outname-aud${atrack}-adjusted.mkv"
		ffmpeg -n -nostdin \
			-hide_banner \
			-v warning \
			-stats \
			-i "$rundir/$infile" \
			-af "atempo=$amod" \
			-acodec "$codec" \
			-map 0:a:"$acount" \
			"$outfile"
		acount=$((acount + 1))
	done
	scount=0
	echo "Adjusting subtitle tracks..."
	for strack in $(ffprobe "$rundir/$infile" -v warning -show_entries stream=index -select_streams s -of compact=p=0:nk=1); do
		outfile="$STAGE4DIR/$outname-sub${strack}-adjusted.mkv"
		ffmpeg -n -nostdin \
			-hide_banner \
			-v warning \
			-stats \
			-itsscale "$smod" \
			-i "$rundir/$infile" \
			-map 0:s:"$scount" \
			-c:s copy "$outfile"
		scount=$((scount + 1))
	done
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function mmatchtracks."
}

function mergeinout {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function mergeinout."
	local infile="$1"
	outfile="$2"
	outname="$(echo "$outfile" |cut -d. -f1)"
	mergename="${outname}-merged.mkv"
	mergefile="$mergename"
	if [ -f "$outfile" ] && [ -f "$infile" ] &&  [ "$segfail" != 1 ]  && [ "$dryrun" != 1 ]; then
		if [ "$MATCHTRACKS" -eq 1 ]; then
			echo "Merging in adjusted audio and subtitle tracks..." |tee -a "$logfile"
			cd "$STAGE4DIR" || exit 1
			ln -s "$outfile" .
			mkvmerge -o "$mergefile" ./*.mkv
		else
			mkvmerge -o "$mergefile" --track-name 0:"DRP Output" "$outfile" "$infile"
		fi
	else
		echo "ERROR: Conditions for merge were not met."
		exit 1
	fi
	[[ -v SUDO_USER ]] && chown "$SUDO_USER" "$mergefile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function mergeinout."
}

IFS=$'\n'
umask 0000
dryrun=0
rundir="$(pwd)"

if [ "$OUTDIR" == "CHANGEME" ]; then
	echo "ERROR: You need to set OUTDIR to your output directory at the top of the script."
	exit 1
fi

while getopts ":i:o:s:r:p:da" flag; do
	case "${flag}" in
		a) anim=1;;
		i) file="${OPTARG}";;
		o) OUTDIR="${OPTARG}";;
		d) dryrun=1;;
		s) STRICT=1;;
		p) clistandard="${OPTARG}";;
		r) rerun=1;intmp="${OPTARG}";;
		*) exit 1;;
	esac
done
shift $((OPTIND-1))

if [ "$dryrun" = 1 ]; then
	LOGDIR="/dev/null"
	STAGE1DIR="/dev/null"
	STAGE2DIR="/dev/null"
	STAGE3DIR="/dev/null"
fi

if [ "$rerun" = 1 ]; then
	KEEPTEMP=1
	TEMPDIR="$OUTDIR/00DRP/${intmp}"
	LOGDIR="$TEMPDIR/LOGS"
	STAGE1DIR="$TEMPDIR/STAGE1"
	STAGE2DIR="$TEMPDIR/STAGE2"
	STAGE3DIR="$TEMPDIR/STAGE3"
	PRELOG="/tmp/prelog.${intmp}"
	logtime="$intmp"
	if [ -f "$STAGE3DIR/concat.txt" ]; then
		cd "$STAGE3DIR" || exit 1
		for file in *.mkv; do
			rm -f "$file"
		done
		rm -f concat.txt
		cd "$rundir" || exit 1
	fi
else
	setup
	logtime="$(date +%s)"
fi

reportsettings

# Export variables shared with smap
export anim
export dsegsize
export dminseg
export OUTDIR
export TEMPROOT
export TEMPDIR
export AUTOMAP

if [ "$STRICT" = 1 ]; then
	RATELOCK=0.0005
fi

diagfile="$rundir/diagreport.txt"

if [ "$file" != "" ]; then
	if [ -f "$file" ]; then
			if [ "$rerun" = 1 ]; then
				echo "ERROR: Rerun only works for individual files.  Please specify a file with -i."
				exit 1
			fi
			echo "--------------------------------------------------"
			echo "Starting drp run."
			stage=1
			orgfile="$file"
			filename=$(echo "$file" |cut -d. -f1)
			mapfile="$rundir/${filename}.smap"

			if [ -f "$mapfile" ]; then
				mapped=1
			else
				mapped=0
			fi

			echo; echo "Working on file: $file" |tee -a "$PRELOG"
			if [ $WRITELOGS = 1 ] && [ "$dryrun" != 1 ] && [ "$stage" = 1 ]; then
				logfile="$LOGDIR/${filename}.${logtime}.log"
				echo "Logging to: $logfile"
				if [ -f "$PRELOG" ]; then
					cat "$PRELOG" >"$logfile"
				fi
			else
				logfile="/dev/null"
			fi

			getresolution "$file"
			getstandard
			gettrueframerate "$file"

			if [ ! -f "$mapfile" ] || [ "$dryrun" = 1 ]; then
				getinterlace "$file"
			fi

			getnomframerate "$file"

			if [ "$standard" == "Bad" ]; then
				echo "ERROR: Frame rate out of bounds for DVD video." |tee -a "$logfile"
				echo "$file,$invres,$infrate,$pctintl,$pcthtc,Bad frame rate" >>"$diagfile"
				exit 1
			elif [ "$standard" == "PAL" ]; then
				analyzepal "$file"
			else
				analyzentsc "$file"
			fi
			
			if [ "$dryrun" = 0 ]; then
				"$runmethod" "$file"
			fi

			if [ "$dryrun" = 0 ] && [ "$standard" != "PAL" ]; then
				finalize "$file" "$bestfile"
			fi

			if [ "$stage" == "1" ] && [ "$SUDO_USER" ] && [ -f "outfile" ]; then
				chown "$SUDO_USER" "$outfile"
			fi

			cd "$rundir" || exit 1

			if [ "$KEEPTEMP" = 0 ]; then
				cleanup
			fi
	else
		echo "ERROR: File not found."
	fi
else
	mkvcount=0
	for file in *.mkv; do
		mkvcount=$((mkvcount + 1))
	done
	if [ "$mkvcount" -gt 0 ]; then
		for file in *.mkv; do
			echo "--------------------------------------------------"
			echo "Starting drp run."
			stage=1
			orgfile="$file"
			filename=$(echo "$file" |cut -d. -f1)
			mapfile="$rundir/${filename}.smap"

			if [ -f "$mapfile" ]; then
				mapped=1
			else
				mapped=0
			fi

			echo; echo "Working on file: $file" |tee -a "$PRELOG"
			if [ $WRITELOGS = 1 ] && [ "$dryrun" != 1 ] && [ "$stage" = 1 ]; then
				logfile="$LOGDIR/${filename}.${logtime}.log"
				echo "Logging to: $logfile"
				if [ -f "$PRELOG" ]; then
					cat "$PRELOG" >"$logfile"
				fi
			else
				logfile="/dev/null"
			fi

			getresolution "$file"
			getstandard
			gettrueframerate "$file"

			if [ ! -f "$mapfile" ] || [ "$dryrun" = 1 ]; then
				getinterlace "$file"
			fi

			getnomframerate "$file"

			if [ "$standard" == "Bad" ]; then
				echo "ERROR: Frame rate out of bounds for DVD video." |tee -a "$logfile"
				echo "$file,$invres,$infrate,$pctintl,$pcthtc,Bad frame rate" >>"$diagfile"
				exit 1
			elif [ "$standard" == "PAL" ]; then
				analyzepal "$file"
			else
				analyzentsc "$file"
			fi
			
			if [ "$dryrun" = 0 ]; then
				"$runmethod" "$file"
			fi

			if [ "$dryrun" = 0 ] && [ "$standard" != "PAL" ]; then
				finalize "$file" "$bestfile"
			fi

			cd "$rundir" || exit 1

			if [ "$KEEPTEMP" = 0 ]; then
				cleanup
			fi
		done
	else
		echo "ERROR: No MKV files found."
	fi
fi
if [ "$dryrun" == "1" ] && [ "$SUDO_USER" ] && [ -f "$rundir/$diagfile" ]; then
	chown "$SUDO_USER" "$rundir/$diagfile"
fi
if [ "$dryrun" == "1" ] && [ "$SUDO_USER" ] && [ -f "$rundir/maplist.txt" ]; then
	chown "$SUDO_USER" "$rundir/maplist.txt"
fi
