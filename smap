#!/bin/bash
# smap (Segment Mapper) bash script - Feb. 6 2025
#
# This script attempts to analyze an MKV file produced by MakeMKV from a DVD 
# source and find where the original frame rates and interlacing methods change
# in the video.  It then creates a segment map that drp can use to process the MKV.

# Settings
USERAMDISK=1
KEEPRAMDISK=0
RAMDISKSIZE=16
SEGSIZE="0.1"
MINSEG="12"
DEBUG=0
DEBUGSLOW=0

# Set directories if not exported from drp (i.e. if not running smap directly)
if [ ! "$OUTDIR" ]; then
	OUTDIR="CHANGEME"
fi
if [ ! "$TEMPROOT" ]; then
	TEMPROOT="$OUTDIR/00DRP"
fi
if [ ! "$TEMPDIR" ]; then
	TEMPDIR="$OUTDIR/00DRP/$(date +%s)"
fi
LOGDIR="$TEMPDIR/LOGS"
STAGE1DIR="$TEMPDIR/STAGE1"
SEGDIR="$TEMPDIR/SEGS"
PIDFILE="$TEMPDIR/smappid-$$"
# End of settings

function setup {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function setup."
	echo "Setting up directories and cleaning up from previous run..."
	if [ ! -d "$TEMPROOT" ]; then
		mkdir "$TEMPROOT" || exit 1
	fi
	if [ ! -d "$TEMPDIR" ]; then
		mkdir "$TEMPDIR" || exit 1
	fi
	if [ ! -d "$STAGE1DIR" ]; then
		mkdir "$STAGE1DIR" || exit 1
	fi
	if [ ! -d "$LOGDIR" ]; then
		mkdir "$LOGDIR" || exit 1
	fi
	if [ ! -d "$SEGDIR" ]; then
		mkdir "$SEGDIR" || exit 1
	else
		cd "$SEGDIR" || exit 1
		if [ "$(pwd)" == "$SEGDIR" ]; then
			for file in *; do
				rm -f "$file"
			done
		fi
	fi
	touch "$PIDFILE"
	cd "$rundir" || exit 1
	sleep 10
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function setup."
}

function cleanup {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function cleanup."
	if [ "$ramdisk" == 1 ] && [ "$KEEPRAMDISK" == 0 ]; then
		cd "$rundir" || exit 1
		echo;echo "Unmounting memory filesystem.  You may be prompted to authenticate if not root."
		sudo umount "$SEGDIR"
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function cleanup."
}

function debugtoggle {
	if [ "$DEBUG" = 1 ]; then
		DEBUG=0
	else
		DEBUG=1
	fi
}

function debugslowtoggle {
	if [ "$DEBUGSLOW" = 1 ]; then
		DEBUGSLOW=0
	else
		DEBUGSLOW=1
	fi
}

function reportsettings {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function reportsettings."
	echo "Reporting settings..."
	if [ "$AUTOMAP" = 1 ]; then
		echo "Auto mapping called from drp."
	else
		echo "Running smap directly."
	fi
	if [ "$USERAMDISK" = 1 ]; then
		echo "Memory filesystem is enabled."
	else
		echo "Memory filesystem is disabled."
	fi
	if [ "$KEEPRAMDISK" = 1 ]; then
		echo "Memory filesystem will be retained."
	else
		echo "Memory filesystem will be torn down."
	fi
	echo "Analysis segment size is $SEGSIZE."
	echo "Retained segment size is $MINSEG." 
	echo "OUTDIR is $OUTDIR"
	echo "TEMPDIR is $TEMPDIR"
	echo "LOGDIR is $LOGDIR"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function reportsettings."
}

function checkinterlace {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function checkinterlace."
	if [ -f "$SEGDIR/idet.out" ]; then
		rm -f "$SEGDIR/idet.out"
	fi
	if [ -f "$SEGDIR/idet.grep" ]; then
		rm -f "$SEGDIR/idet.grep"
	fi
	if [ "$anim" = 1 ]; then
		ffmpeg -an -sn \
			-hide_banner \
			-stats \
			-filter:v "idet=intl_thres=1.1:rep_thres=1.1" \
			-f null - \
			-i "$file" 2>"$SEGDIR/idet.out"
	else
		ffmpeg -an -sn \
			-hide_banner \
			-stats \
			-filter:v "idet=intl_thres=1.05:rep_thres=1.1" \
			-f null - \
			-i "$file" 2>"$SEGDIR/idet.out"
	fi
	grep -m4 "Parsed_idet" "$SEGDIR/idet.out" >"$SEGDIR/idet.grep"
	gl1=$(grep "Final flag accuracy" "$SEGDIR/idet.out")
	gl2=$(grep "Repeated Fields:" "$SEGDIR/idet.out")
	gl3=$(grep "Single frame detection:" "$SEGDIR/idet.out")
	gl4=$(grep "Multi frame detection:" "$SEGDIR/idet.out")
	idettop=$(echo "$gl2" |sed -e 's/.*Top:\(.*\)Bottom:.*/\1/' |tr -d ' ')
	[ $DEBUG = 0 ] || echo "DEBUG: Variable idettop is $idettop."
	idetbottom=$(echo "$gl2" |sed -e 's/.*Bottom:\(.*\)/\1/' |tr -d ' ')
	[ $DEBUG = 0 ] || echo "DEBUG: Variable idetbottom is $idetbottom."
	idetsftff=$(echo "$gl2" |sed -e 's/.*Bottom:\(.*\)/\1/' |tr -d ' ')
	[ $DEBUG = 0 ] || echo "DEBUG: Variable idetstfff is $idetsftff."
	idetsfbff=$(echo "$gl3" |sed -e 's/.*TFF:\(.*\)BFF:.*/\1/' |tr -d ' ')
	[ $DEBUG = 0 ] || echo "DEBUG: Variable idetsfbff is $idetsfbff."
	idetmftff=$(echo "$gl3" |sed -e 's/.*TFF:\(.*\)BFF:.*/\1/' |tr -d ' ')
	[ $DEBUG = 0 ] || echo "DEBUG: Variable idetmftff is $idetmftff."						
	idetmfbff=$(echo "$gl3" |sed -e 's/.*BFF:\(.*\)Progressive:.*/\1/' |tr -d ' ')
	[ $DEBUG = 0 ] || echo "DEBUG: Variable idetmfbff is $idetmfbff."

	case "$idettop" in
		''|*[!0-9]*) idettop=0 ;;
   		*) ;;
	esac
	[ $DEBUG = 0 ] || echo "DEBUG: Variable idettop is $idettop."
	case "$idetbottom" in
		''|*[!0-9]*) idetbottom=0 ;;
   		*) ;;
	esac
	[ $DEBUG = 0 ] || echo "DEBUG: Variable idetbottom is $idetbottom."

	htcfields=$((idettop + idetbottom))
	[ $DEBUG = 0 ] || echo "DEBUG: Variable htcfields is $htcfields."
	pcthtc=$(echo "($htcfields / $curframes) * 100" |bc -l)
	[ $DEBUG = 0 ] || echo "DEBUG: Variable pcthtc is $pcthtc."
	pcthtctr="$(printf "%.0f\n" "$pcthtc")"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable pcthtctr is $pcthtctr."
	idetsfintl=$(echo "$idetsftff + $idetsfbff" |bc -l)
	[ $DEBUG = 0 ] || echo "DEBUG: Variable idetsfintl is $idetsfintl."
	idetmfintl=$(echo "$idetmftff + $idetmfbff" |bc -l)
	[ $DEBUG = 0 ] || echo "DEBUG: Variable idetmfintl is $idetmfintl."
	idetallintl=$(echo "$idetsfintl + $idetmfintl" |bc -l)
	[ $DEBUG = 0 ] || echo "DEBUG: Variable idetallintl is $idetallintl."
	intlfields=$(echo "$idetallintl / 2" |bc -l)
	[ $DEBUG = 0 ] || echo "DEBUG: Variable intlfields is $intlfields."
	pctintl=$(echo "($idetmfintl / $curframes) * 100" |bc -l)
	[ $DEBUG = 0 ] || echo "DEBUG: Variable pctintl is $pctintl."
	pctintltr="$(printf "%.0f\n" "$pctintl")"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable pctintltr is $pctintltr."
	if [ "$anim" = 1 ]; then
		if [ "$nomfrate" = 24 ] && [ "$(echo "$pcthtc == 0" |bc -l)" -eq 1 ] && [ "$(echo "$pctintl == 0" |bc -l)" -eq 1 ]; then
			type="STC"
		elif [ "$(echo "$pcthtc > 0" |bc -l)" -eq 1 ]; then
			type="HTC"
		elif [ "$(echo "$pctintl > 0" |bc -l)" -eq 1 ]; then
			type="INT"
		else
			type="BDTC"
		fi
	else
		if [ "$(echo "$pcthtc >= 8" |bc -l)" -eq 1 ] && [ "$(echo "$pctintl > 0" |bc -l)" -eq 1 ]; then
			type="HTC"
		elif [ "$(echo "$pctintl > 0" |bc -l)" -eq 1 ]; then
			type="INT"
		else
			type="BDTC"
		fi
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Variable type is $type."
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function checkinterlace."
}

function setupramdisk {
	if [ "$USERAMDISK" == 1 ]; then
		insize="$(ls -sh --block-size=G "$outfile" |cut -dG -f1)"
		if [ "$(echo "$insize <= $RAMDISKSIZE - 1" |bc -l)" -eq 1 ]; then
			mntstatus=$(grep "SEGDIR" /proc/mounts |cut -d' ' -f 3)
			memfssize=$((insize + 1))
			if [ "$mntstatus" == "tmpfs" ]; then
				echo "Memory filesystem already exists."
			else
				echo "Setting up ${memfssize}GB memory filesystem.  You will be prompted to authenticate if not root."
				sudo mount -o size=${memfssize}G -t tmpfs none "$SEGDIR" || exit 1
				ramdisk=1
			fi
		else
			echo "Input file size exceeds RAMDISKSIZE.  Processing this file on disk."
		fi
	fi
}

function makesegs {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function makesegs."
	echo "Dividing the input file into minimum time segments..."
	[ $DEBUG = 0 ] || set -x
	set -m
	cd "$rundir" || exit 1
	inname=$(echo "$infile" |cut -d. -f1)
	outname=""${inname}-video-stage1-ffv1-step0.mkv""
	outfile="$STAGE1DIR/$outname"
	if [ ! -f "$outfile" ]; then
		ffmpeg -n \
			-an -sn \
			-hide_banner \
			-v warning \
			-stats \
			-i "$infile" \
			-vcodec ffv1 "$outfile"
	else
		echo "Step 1 conversion already exists, so using it."
	fi
	setupramdisk
	ffmpeg -an -sn \
		-i "$outfile" \
		-f segment \
		-segment_time "$SEGSIZE" \
		-reset_timestamps 1 \
		-c:v copy "$SEGDIR/%05d.mkv"
	set +m
	[ $DEBUG = 0 ] || set +x
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function makesegs."
}

function getstandard {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function getstandard."
	invres=$(ffprobe -v error -select_streams v -show_entries stream=height -of default=noprint_wrappers=1:nokey=1 00000.mkv)
	[ $DEBUG = 0 ] || echo "DEBUG: Variable invres is $invres."
	if [ "$invres" -eq "576" ]; then
		standard="PAL"
		echo "Trying PAL frame rate analysis.  This is not reliable."
	elif [ "$invres" -eq "480" ]; then
		standard="NTSC"
		echo "Trying NTSC frame rate analysis."
	else
		standard="UNKNOWN"
		echo "ERROR: This doesn't appear to be NTSC or PAL SD video."
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function getstandard."
}

function getfratesntsc {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function getfratesntsc."
	echo "Getting the frame rate of each segment file..."
	cumframes=0
	for file in *.mkv; do
		[ $DEBUG = 0 ] || echo "DEBUG: Variable file is $file."
		curfile="$file"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable curfile is $curfile."
		filenum=$(echo "$curfile" |cut -d. -f1)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable filenum is $filenum."
		nextnum=$(printf "%05d" $((10#$filenum + 1)))
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextnum is $nextnum."
		prevnum=$(printf "%05d" $((10#$filenum - 1)))
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevnum is $prevnum."
		if [ "$prevnum" -lt 0 ]; then
			prevnum="00000"
		fi
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevnum is $prevnum."
		if [ "$nextnum" -gt "$filecount" ]; then
			nextnum="$(printf "%05d" "$filecount")"
		fi
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextnum is $nextnum."
		nextfile="$nextnum.mkv"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextfile is $nextfile."
		prevfile="$prevnum.mkv"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevfile is $prevfile."
	
		curdursraw=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$curfile")
		[ $DEBUG = 0 ] || echo "DEBUG: Variable curdursraw is $curdursraw."
		curdurs="$(printf "%.3f\n" "$curdursraw")"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable curdurs is $curdurs."
		curframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$curfile" |head -n 1)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable curframes is $curframes."
		cumframes=$((cumframes + curframes))
		[ $DEBUG = 0 ] || echo "DEBUG: Variable cumframes is $cumframes."
		curfrateraw=$(echo "$curframes / $curdurs" |bc -l)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable curfrateraw is $curfrateraw."
		curfrate="$(printf "%.3f\n" "$curfrateraw")"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable curfrate is $curfrate."
		nextdurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$nextfile")
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextdurs is $nextdurs."
		nextframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$nextfile" |head -n 1)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextframes is $nextframes."
		nextfrate=$(echo "$nextframes / $nextdurs" |bc -l)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextfrate is $nextfrate."
		prevdurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$prevfile")
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevdurs is $prevdurs."
		prevframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$prevfile" |head -n 1)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevframes is $prevframes."
		prevfrate=$(echo "$prevframes / $prevdurs" |bc -l)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevfrate is $prevfrate."

		if [ "$prevfrate" == "" ]; then
			prevfrate="$curfrate"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable prevfrate is $prevfrate."
		fi

		cumtime=$(echo "$cumtime + $curdurs" |bc -l)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable cumtime is $cumtime."

		if [ "$(echo "$curfrate < 25.8" |bc -l)" -eq 1 ]; then
			nomfrate="24"
		elif [ "$(echo "$curfrate > 28.2" |bc -l)" -eq 1 ]; then
			nomfrate="30"
		elif [ "$filenum" -lt "1" ] && [ "$(echo "$curfrate < 26.5" |bc -l)" -eq 1 ]; then
			nomfrate="24"
		elif [ "$filenum" -lt "1" ] && [ "$(echo "$curfrate >= 26.5" |bc -l)" -eq 1 ]; then
			nomfrate="30"
		elif [ "$(echo "$curfrate > 35" |bc -l)" -eq 1 ]; then
			echo "WARNING: Frame rate way out of range for DVD sourced video."
			nomfrate="30"
		elif [ "$(echo "$curfrate < 20" |bc -l)" -eq 1 ]; then
			echo "WARNING: Frame rate way out of range for DVD sourced video."
			nomfrate="24"
		else
			nomfrate="27"
		fi
		if [ "$nomfrate" = 30 ] || [ "$anim" = 1 ]; then
			checkinterlace
		elif [ "$nomfrate" = "27" ]; then
			type="TRN"
		else
			type="STC"
			pcthtctr="NA"
			pctintltr="NA"
		fi
	    echo "${line}:${curfile},${curdurs},${cumtime},${curframes},${curfrate},${nomfrate},${cumframes},${type},${pcthtctr},${pctintltr}" >>"$reportfile"
	    echo "${line}: ${curdurs}s, ${cumtime}s, ${curframes}f, ${cumframes}f, ${curfrate}FPS, ${nomfrate}FPS, T:${pcthtctr}, I:${pctintltr}, ${type}"
		line=$((line + 1))
		[ $DEBUG = 0 ] || echo "DEBUG: Variable line is $line."
		[ $DEBUGSLOW = 0 ] || sleep 10
	done
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function getfratesntsc."
}

function getfratespal {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function getfratespal."
	echo "Getting the frame rate of each segment file..."
	for file in *.mkv; do
		[ $DEBUG = 0 ] || echo "DEBUG: Variable file is $file."
		curfile="$file"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable curfile is $curfile."
		filenum=$(echo "$curfile" |cut -d. -f1)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable filenum is $filenum."
		nextnum=$(printf "%05d" $((10#$filenum + 1)))
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextnum is $nextnum."
		prevnum=$(printf "%05d" $((10#$filenum - 1)))
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevnum is $prevnum."
		if [ "$prevnum" -lt 0 ]; then
			prevnum="00000"
		fi
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevnum is $prevnum."
		if [ "$nextnum" -gt "$filecount" ]; then
			nextnum="$(printf "%05d" "$filecount")"
		fi
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextnum is $nextnum."
		nextfile="$nextnum.mkv"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextfile is $nextfile."
		prevfile="$prevnum.mkv"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevfile is $prevfile."
	
		curdurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$curfile")
		[ $DEBUG = 0 ] || echo "DEBUG: Variable curdurs is $curdurs."
		curframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$curfile" |head -n 1)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable curframes is $curframes."
		curfrate=$(echo "$curframes / $curdurs" |bc -l)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable curfrate is $curfrate."
		nextdurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$nextfile")
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextdurs is $nextdurs."
		nextframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$nextfile" |head -n 1)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextframes is $nextframes."
		nextfrate=$(echo "$nextframes / $nextdurs" |bc -l)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nextfrate is $nextfrate."
		prevdurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$prevfile")
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevdurs is $prevdurs."
		prevframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$prevfile" |head -n 1)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevframes is $prevframes."
		prevfrate=$(echo "$prevframes / $prevdurs" |bc -l)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable prevfrate is $prevfrate."

		cumtime=$(echo "$cumtime + $curdurs" |bc -l)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable cumtime is $cumtime."

		# PAL - This is very dodgy as I have little PAL material to test with
		if [ "$(echo "$curfrate <= 27" |bc -l)" -eq 1 ]; then
			nomfrate="25"
		elif [ "$(echo "$curfrate > 48" |bc -l)" -eq 1 ]; then
			nomfrate="50"
		else
			nomfrate="ERR"
		fi
		[ $DEBUG = 0 ] || echo "DEBUG: Variable nomfrate is $nomfrate."

	    echo "${line}:${curfile},${curdurs},${cumtime},${curframes},${curfrate},${nomfrate}" >>"$reportfile"
		line=$((line + 1))
		[ $DEBUG = 0 ] || echo "DEBUG: Variable line is $line."
		[ $DEBUGSLOW = 0 ] || sleep 10
	done
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function getfratespal."
}

function gettrans {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function gettrans."
	echo;echo "Finding frame rate transitions..."
	transfile="$TEMPDIR/$infilename.trans"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable transfile is $transfile."
	if [ -f "$transfile" ]; then
		rm -f "$transfile" || exit 1
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Variable prevrate is $prevrate."
	firstline=1
	while read -r line; do
		[ $DEBUG = 0 ] || echo "DEBUG: Variable line is $line."
		curtype=$(echo "$line"|cut -d, -f8)
		[ $DEBUG = 0 ] || echo "DEBUG: Variable curtype is $curtype."
		if [ "$curtype" != "$prevtype1" ]; then
			if [ "$line" = 0 ] || [ "$line" = 1 ]; then
				:
			elif [ "$prevtype2" == "INT" ] && [ "$curtype" == "INT" ] && [ "$prevtype1" == "HTC" ]; then
				:
			elif [ "$prevtype2" == "HTC" ] && [ "$curtype" == "HTC" ] && [ "$prevtype1" == "INT" ]; then
				:
			elif [ "$prevtype2" == "BDTC" ] && [ "$curtype" == "BDTC" ] && [ "$prevtype1" == "INT" ]; then
				:
			elif [ "$prevtype2" == "BDTC" ] && [ "$curtype" == "BDTC" ] && [ "$prevtype1" == "HTC" ]; then
				:
			elif [ "$firstline" = 1 ]; then
				:
			else
				echo "$prevline" >>"$transfile"
			fi
		fi
		prevtype2="$prevtype1"
		prevtype1="$curtype"
		prevline="$line"
		firstline=0
		[ $DEBUGSLOW = 0 ] || sleep 10
	done <"$reportfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function gettrans."
}

function refinetrans {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function refinetrans."
	tempmap="$TEMPDIR/temp.smap"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable tempmap is $tempmap."
	echo "Making fine adjustments to the transition points..."
	[ $DEBUG = 0 ] || echo "DEBUG: Entering loop."
	local line
	while read -r line; do
		cumframefinal="$(echo "$line" |cut -d, -f7)"
		[ $DEBUG = 0 ] || echo "DEBUG: Variable cumframefinal is $cumframefinal."
		echo "$cumframefinal" >>"$tempmap"
		[ $DEBUGSLOW = 0 ] || sleep 10
	done <"$transfile"
	[ $DEBUG = 0 ] || echo "DEBUG: Exiting loop."
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function refinetrans."
}

function makemap {
	[ $DEBUG = 0 ] || echo "DEBUG: Entering function makemap."
	prevtime=0
	maxmap="$TEMPDIR/max-${MINSEG}.smap"
	touch "$maxmap"
	[ $DEBUG = 0 ] || echo "DEBUG: Variable maxmap is $maxmap."
	mapfile="$rundir/$infilename.smap"
	if [ ! -f "$mapfile" ]; then
		[ $DEBUG = 0 ] || echo "DEBUG: Variable mapfile is $mapfile."
		echo "Writing segment map file..."
		while read -r time; do
			[ $DEBUG = 0 ] || echo "DEBUG: Variable time is $time."
			timediff="$(echo "$time - $prevtime" |bc -l)"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable timediff is $timediff."
			if [ "$(echo "$timediff >= $MINSEG" |bc -l)" -eq 1 ]; then
				echo "$time" >>"$maxmap"
			#else
			#	sed -i '$d' "$maxmap"
			fi
			prevtime="$time"
			[ $DEBUG = 0 ] || echo "DEBUG: Variable prevtime is $prevtime."
			[ $DEBUGSLOW = 0 ] || sleep 10
		done <"$tempmap"
		# Build the segmap from the maxedlist
		echo -n "start," >"$mapfile"
		while read -r time; do
			[ $DEBUG = 0 ] || echo "DEBUG: Variable time is $time."
			echo "$time" >>"$mapfile"
			echo -n "$time," >>"$mapfile"
			[ $DEBUGSLOW = 0 ] || sleep 10
		done <"$maxmap"
		echo "end" >>"$mapfile"
		if [ -f "$mapfile" ] && [ "$SUDO_USER" ]; then
			chown "$SUDO_USER" "$mapfile"
		fi
	else
		[ $DEBUG = 0 ] || echo "DEBUG: Mapfile $mapfile already exists."
	fi
	[ $DEBUG = 0 ] || echo "DEBUG: Leaving function makemap."
}

echo "Starting smap run."
IFS=$'\n'
umask 0000
rundir="$(pwd)"
ramdisk=0
[ $DEBUG = 0 ] || echo "DEBUG: Variable rundir is $rundir."

if [ "$OUTDIR" == "CHANGEME" ]; then
	echo "ERROR: You need to set OUTDIR to your output directory at the top of the script."
	exit 1
fi

infile="$1"
[ $DEBUG = 0 ] || echo "DEBUG: Variable infile is $infile."

infilename="$(echo "$infile" |cut -d. -f1)"
[ $DEBUG = 0 ] || echo "DEBUG: Variable infilename is $infilename."

if [ ! -f "$infile" ]; then
	echo "ERROR: No input file specified.  Run 'segmapper <file>'"
	exit 1
fi

# Make sure the system has at least 16GB or disable the ramdisk
if [ "$USERAMDISK" == 1 ]; then
	sysmem=$(free --giga |grep Mem |awk '/^Mem:/{print $2}')
	[ $DEBUG = 0 ] || echo "DEBUG: Variable sysmem is $sysmem."
	if [ "$sysmem" -lt "24" ]; then
		echo "The USERAMDISK option has been disabled due to insufficient memory."
		USERAMDISK=0
	fi
fi

trap cleanup EXIT
trap exit SIGINT
trap debugtoggle SIGUSR1
trap debugslowtoggle SIGUSR2

if [[ ! -z $dsegsize ]]; then
	[ $DEBUG = 0 ] || echo "DEBUG: Variable dsegsize is $dsegsize."
	SEGSIZE="$dsegsize"
fi

if [[ ! -z $dminseg ]]; then
	[ $DEBUG = 0 ] || echo "DEBUG: Variable dminseg is $dminseg."
	MINSEG="$dminseg"
fi

echo "Process ID is $$."
timein="$(date +%s)"
[ $DEBUG = 0 ] || echo "DEBUG: Variable timein is $timein."

[ $DEBUG = 0 ] || echo "DEBUG: Calling function setup."
setup

[ $DEBUG = 0 ] || echo "DEBUG: Calling function reportsettings."
reportsettings

sleep 3
[ $DEBUG = 0 ] || echo "DEBUG: Calling function makesegs."
makesegs

cd "$SEGDIR" || exit 1
[ $DEBUG = 0 ] || echo "DEBUG: Calling function getstandard."
getstandard

cumtime=0
line=0
reportfile="$TEMPDIR/$infilename.rates"
[ $DEBUG = 0 ] || echo "DEBUG: Variable reportfile is $reportfile."

filecount=-1
for file in *.mkv; do
	filecount=$((filecount + 1))
done
[ $DEBUG = 0 ] || echo "DEBUG: Variable filecount is $filecount."

if [ "$standard" == "NTSC" ]; then
	[ $DEBUG = 0 ] || echo "DEBUG: Calling function getfratesntsc."
	getfratesntsc
else
	[ $DEBUG = 0 ] || echo "DEBUG: Calling function getfratespal."
	getfratespal
fi

[ $DEBUG = 0 ] || echo "DEBUG: Calling function gettrans."
gettrans

[ $DEBUG = 0 ] || echo "DEBUG: Calling function refinetrans."
refinetrans

[ $DEBUG = 0 ] || echo "DEBUG: Calling function makemap."
makemap

timeout="$(date +%s)"
[ $DEBUG = 0 ] || echo "DEBUG: Variable timeout is $timeout."

runtime=$((timeout - timein))
echo "Segment mapper completed analysis in $runtime seconds."

[ $DEBUG = 0 ] || echo "DEBUG: Exiting smap."
