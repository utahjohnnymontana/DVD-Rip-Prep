#!/bin/bash
# smap (Segment Mapper) bash script - Dec. 3 2024
#
# This script attempts to analyze an MKV file produced by MakeMKV from a DVD 
# source and find where the original frame rates change in the video.  It
# then creates a segment map that drp can use to process the MKV.

# Settings
SEGSIZE="0.1"
# How finely should the script slice the video for analysis?  A segment 
# time of 0.1 effectively instructs ffmpeg to make the smallest possible 
# segments.  Usually, the smallest that ffmpeg will produce is about 1/2 
# second.  Small values will catch brief, but real, transitions at the 
# cost of significantly increased processing time.  Whether those short 
# segments exist in the content you are analyzing is uncertain and whether 
# or not you care about potentially missing a few interlaced frames is a 
# matter of preference.  If your video has no short segments, you can set 
# this to something like 10, 30, or even 60 and get much faster runs.  

MINSEG="0.2"
# Segments shorter than MINSEG will be ignored.  Very short segments may 
# be false positives or inconsequential parts like black screen transitions 
# that will lose nothing as a result of dropped frames.  There is no right 
# answer when it comes to this setting.  0.5 is the shortest practical 
# setting and should catch just about everything.

USERAMDISK=0
# If enabled, the script will create an 8GB tmpfs memory filesystem.  This will 
# consume 8GB of RAM for the duration that the script runs, so you probably 
# wouldn't want to do this on a system that has less than 16GB of RAM.  
#
# Because this script writes out thousands of files per analysis, using a
# memory filesystem seems like a good idea.  Writing lots of small files over
# and over might accelerate disk wear.  This is disabled by default, but if you
# have the RAM, I recommend enabling it.
#
# If the script crashes or you break out of it, you will need to manually
# unmount the filesystem.

OUTDIR="~" # Set to your output directory (default is home dir)
TEMPDIR="$OUTDIR/00DRP"
LOGDIR="$TEMPDIR/LOGS"
SEGDIR="$TEMPDIR/segments"
# End of settings

function setup {
	echo "Setting up directories and cleaning up from previous run..."
	if [ ! -d "$TEMPDIR" ]; then
		mkdir "$TEMPDIR" || exit 1
	fi
	if [ ! -d "$LOGDIR" ]; then
		mkdir "$LOGDIR" || exit 1
	fi
	if [ ! -d "$SEGDIR" ]; then
		mkdir "$SEGDIR" || exit 1
	else
		cd "$SEGDIR" || exit 1
		if [ "$(pwd)" == "$SEGDIR" ]; then
			rm -f *
		fi
	fi
	cd "$rundir" || exit 1
if [ "$USERAMDISK" == 1 ]; then
	cd "$rundir"
	echo "Unmounting memory filesystem.  You may be prompted to authenticate if not root."
	sudo umount "$SEGDIR"
fi
	if [ "$USERAMDISK" == 1 ]; then
		mntstatus=$(grep "SEGDIR" /proc/mounts |cut -d' ' -f 3)
		if [ "$mntstatus" == "tmpfs" ]; then
			echo "Memory filesystem already exists."
		else
			echo "Setting up memory filesystem.  You will be prompted to authenticate if not root."
			sudo mount -o size=8G -t tmpfs none "$SEGDIR"
		fi
	fi
	sleep 10
}

function makesegs {
	echo "Dividing the input file into minimum time segments..."
	ffmpeg -an -sn \
		-i "$infile" \
		-f segment \
		-segment_time "$SEGSIZE" \
		-reset_timestamps 1 \
		-c:v copy "$SEGDIR/%05d.mkv"
}

function getstandard {
	invres=$(ffprobe -v error -select_streams v -show_entries stream=height -of default=noprint_wrappers=1:nokey=1 00000.mkv)
	if [ "$invres" -eq "576" ]; then
		standard="PAL"
		echo "Trying PAL frame rate analysis.  This is not reliable."
	elif [ "$invres" -eq "480" ]; then
		standard="NTSC"
		echo "Trying NTSC frame rate analysis."
	else
		standard="UNKNOWN"
		echo "ERROR: This doesn't appear to be NTSC or PAL SD video."
	fi
}

function getfratesntsc {
	echo "Getting the frame rate of each segment file..."
	for file in $(ls -1 *.mkv); do
		curfile="$file"
		filenum=$(echo "$curfile" |cut -d. -f1)
		nextnum=$(printf "%05d" $((10#$filenum + 1)))
		prevnum=$(printf "%05d" $((10#$filenum - 1)))
		if [ "$prevnum" -lt 0 ]; then
			prevnum="00000"
		fi
		if [ "$nextnum" -gt "$filecount" ]; then
			nextnum="$(printf "%05d" "$filecount")"
		fi
		nextfile="$nextnum.mkv"
		prevfile="$prevnum.mkv"
	
		curdurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$curfile")
		curframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$curfile" |head -n 1)
		curfrate=$(echo "$curframes / $curdurs" |bc -l)
		nextdurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$nextfile")
		nextframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$nextfile" |head -n 1)
		nextfrate=$(echo "$nextframes / $nextdurs" |bc -l)
		prevdurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$prevfile")
		prevframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$prevfile" |head -n 1)
		prevfrate=$(echo "$prevframes / $prevdurs" |bc -l)

		if [ "$prevfrate" == "" ]; then
			prevfrate="$curfrate"
		fi

		cumtime=$(echo "$cumtime + $curdurs" |bc -l)

		if [ "$(echo "$curfrate < 25" |bc -l)" -eq 1 ]; then
			nomfrate="24FPS"
		elif [ "$(echo "$curfrate > 29" |bc -l)" -eq 1 ]; then
			nomfrate="30FPS"
		elif [ "$filenum" -lt "1" ] && [ "$(echo "$curfrate < 26.5" |bc -l)" -eq 1 ]; then
			nomfrate="24FPS"
		elif [ "$filenum" -lt "1" ] && [ "$(echo "$curfrate >= 26.5" |bc -l)" -eq 1 ]; then
			nomfrate="30FPS"
		elif [ "$(echo "$curfrate > 35" |bc -l)" -eq 1 ] || [ "$(echo "$curfrate < 20" |bc -l)" -eq 1 ]; then
			echo "ERROR: Frame rate out of range for DVD sourced video."
			exit 1
		else
			# Frame rate is not diagnostic, so compare it to previous and next
			# High point among marginal 24FPS
			echo "Ambiguous frame rate at $curfile.  Trying before/after comparison."
			if [ "$(echo "$curfrate <= 27" |bc -l)" -eq 1 ] && [ "$(echo "$prevfrate <= 26" |bc -l)" -eq 1 ] && [ "$(echo "$nextfrate <= 26" |bc -l)" -eq 1 ]; then
				nomfrate="24FPS"
			# Low point among marginal 30FPS
			elif [ "$(echo "$curfrate >= 27" |bc -l)" -eq 1 ] && [ "$(echo "$prevfrate >= 28" |bc -l)" -eq 1 ] && [ "$(echo "$nextfrate >= 28" |bc -l)" -eq 1 ]; then
				nomfrate="30FPS"
			# Mid point between 24 and 30 FPS
			elif [ "$(echo "$curfrate <= 27" |bc -l)" -eq 1 ] && [ "$(echo "$prevfrate < 27" |bc -l)" -eq 1 ] && [ "$(echo "$nextfrate > 27" |bc -l)" -eq 1 ]; then
				nomfrate="30FPS"
			# Mid point between 30 and 24 FPS
			elif [ "$(echo "$curfrate >= 27" |bc -l)" -eq 1 ] && [ "$(echo "$prevfrate > 27" |bc -l)" -eq 1 ] && [ "$(echo "$nextfrate < 27" |bc -l)" -eq 1 ]; then
				nomfrate="24FPS"
			fi
		fi

	    echo "${line}:${curfile},${curdurs},${cumtime},${curframes},${curfrate},${nomfrate}" |tee -a "$reportfile"
		line=$((line + 1))
	done
}

function getfratespal {
	echo "Getting the frame rate of each segment file..."
	for file in $(ls -1 *.mkv); do
		echo "Working on $file"
		curfile="$file"
		filenum=$(echo "$curfile" |cut -d. -f1)
		nextnum=$(printf "%05d" $((10#$filenum + 1)))
		prevnum=$(printf "%05d" $((10#$filenum - 1)))
		if [ "$prevnum" -lt 0 ]; then
			prevnum="00000"
		fi
		if [ "$nextnum" -gt "$filecount" ]; then
			nextnum="$(printf "%05d" "$filecount")"
		fi
		nextfile="$nextnum.mkv"
		prevfile="$prevnum.mkv"
	
		curdurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$curfile")
		curframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$curfile" |head -n 1)
		curfrate=$(echo "$curframes / $curdurs" |bc -l)
		nextdurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$nextfile")
		nextframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$nextfile" |head -n 1)
		nextfrate=$(echo "$nextframes / $nextdurs" |bc -l)
		prevdurs=$(ffprobe -v error -select_streams v -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$prevfile")
		prevframes=$(ffprobe -v error -select_streams v -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$prevfile" |head -n 1)
		prevfrate=$(echo "$prevframes / $prevdurs" |bc -l)

		cumtime=$(echo "$cumtime + $curdurs" |bc -l)

		# PAL - This is very dodgy as I have little PAL material to test with
		if [ "$(echo "$curfrate <= 26" |bc -l)" -eq 1 ]; then
			nomfrate="24FPS"
		elif [ "$(echo "$curfrate > 26" |bc -l)" -eq 1 ]; then
			nomfrate="50FPS"
		else
			nomfrate="Mix"
		fi

	    echo "${line}:${curfile},${curdurs},${cumtime},${curframes},${curfrate},${nomfrate}" >>"$reportfile"
		line=$((line + 1))
	done
}

function gettrans {
	echo "Finding segments that enclose frame rate transitions..."
	transfile="$infilename.trans"
	if [ -f "$transfile" ]; then
		rm -f "$transfile" || exit 1
	fi
	prevrate=$(sed -n 1,1p "$reportfile"|cut -d, -f6)
	for line in $(cat "$reportfile"); do
		currate=$(echo "$line"|cut -d, -f6)
		if [ "$currate" != "$prevrate" ]; then
			echo "$line" >>"$transfile"
		fi
		prevrate="$currate"
	done
}

function refinetrans {
	tempmap="$SEGDIR/temp.smap"
	maxmap="$SEGDIR/max.smap"
	mapfile="$rundir/$infilename.smap"
	cumtime=0
	echo "Making fine adjustments to the transition points..."
	for line in $(cat "$transfile"); do
		grep -C1 "$line" "$reportfile" >triplet.txt
		durstop=$(sed -n 1,1p triplet.txt|cut -d, -f2)
		dursmid=$(sed -n 2,2p triplet.txt|cut -d, -f2)
		dursbot=$(sed -n 3,3p triplet.txt|cut -d, -f2)
		#echo "durs: $durstop, $dursmid, $dursbot"
		cumtimetop=$(sed -n 1,1p triplet.txt|cut -d, -f3)
		cumtimemid=$(sed -n 2,2p triplet.txt|cut -d, -f3)
		cumtimebot=$(sed -n 3,3p triplet.txt|cut -d, -f3)
		#echo "cumtime: $cumtimetop, $cumtimemid, $cumtimebot"
		nomfratetop=$(sed -n 1,1p triplet.txt|cut -d, -f6 |cut -dF -f1)
		nomfratemid=$(sed -n 2,2p triplet.txt|cut -d, -f6 |cut -dF -f1)
		nomfratebot=$(sed -n 3,3p triplet.txt|cut -d, -f6 |cut -dF -f1)
		#echo "nomfrate: $nomfratetop, $nomfratemid, $nomfratebot"
		truefratetop=$(sed -n 1,1p triplet.txt|cut -d, -f5)
		truefratemid=$(sed -n 2,2p triplet.txt|cut -d, -f5)
		truefratebot=$(sed -n 3,3p triplet.txt|cut -d, -f5)
		#echo "truefrate: $truefratetop, $truefratemid, $truefratebot"
		fratedifftop="$(echo "$truefratetop - $nomfratetop" |bc -l)"
		fratediffmid="$(echo "$truefratemid - $nomfratemid" |bc -l)"
		fratediffbot="$(echo "$truefratebot - $nomfratebot" |bc -l)"
		#echo "fratediff: $fratedifftop, $fratediffmid, $fratediffbot"
		if [ "$(echo "$fratedifftop < 0" |bc -l)" -eq 1 ]; then
			absdifftop="$(echo "$fratedifftop * -1" |bc -l)"
		else
			absdifftop="$fratedifftop"
		fi
		if [ "$(echo "$fratediffmid < 0" |bc -l)" -eq 1 ]; then
			absdiffmid="$(echo "$fratediffmid * -1" |bc -l)"
		else
			absdiffmid="$fratediffmid"
		fi
		if [ "$(echo "$fratediffbot < 0" |bc -l)" -eq 1 ]; then
			absdiffbot="$(echo "$fratediffbot * -1" |bc -l)"
		else
			absdiffbot="$fratediffbot"
		fi
		#echo "absdiff: $absdifftop, $absdiffmid, $absdiffbot"
		# Which segment is really transitional?
		if [ "$(echo "$absdifftop > $absdiffmid" |bc -l)" -eq 1 ] && [ "$(echo "$absdifftop > $absdiffbot" |bc -l)" -eq 1 ]; then
			duration="$durstop"
			truefrate="$truefratetop"
			cumtime="$cumtimetop"
			#echo "top"
		elif [ "$(echo "$absdiffmid > $absdifftop" |bc -l)" -eq 1 ] && [ "$(echo "$absdiffmid > $absdiffbot" |bc -l)" -eq 1 ]; then
			duration="$dursmid"
			truefrate="$truefratemid"
			cumtime="$cumtimemid"
			#echo "mid"
		else
			duration="$dursbot"
			truefrate="$truefratebot"
			cumtime="$cumtimebot"
			#echo "bot"
		fi
		#echo "$duration, $truefrate, $cumtime"
		# Adjust the time at the transitional segment
		ratediff="$(echo "$truefrate - 23.976" |bc -l)"
		#echo "ratediff: $ratediff"
		if [ "$(echo "$ratediff < 0" |bc -l)" -eq 1 ]; then
			difffrac=0
		else
			difffrac="$(echo "$ratediff / 5.99" |bc -l)"
		fi
		#echo "diffrac: $difffrac"
		timeadj="$(echo "$duration * $difffrac" |bc -l)"
		#echo "timeadj: $timeadj"
		if [ "$(echo "$nomfratetop > $nomfratebot" |bc -l)" -eq 1 ]; then
			# 30 to 24
			modadj="$(echo "$duration - $timeadj" |bc -l)"
		else
			# 24 to 30
			modadj="$timeadj"
		fi
		#echo "modadj: $modadj"
		cumtimefinal="$(echo "$cumtime - $modadj" |bc -l)"
		#echo "$cumtime, $cumtimefinal"
		echo "$cumtimefinal" >>"$tempmap"
		#echo "Experimental time adjustment ends here."
	done
}

function makemap {
	# Drop short segments and write the maxedlist
	prevtime=0
	# Apply MINSEG to tempmap
	touch "$maxmap"
	for time in $(cat "$tempmap"); do
		timediff="$(echo "$time - $prevtime" |bc -l)"
		if [ "$(echo "$timediff >= $MINSEG" |bc -l)" -eq 1 ]; then
			echo "$time" >>"$maxmap"
		else
			sed -i '$d' "$maxmap"
		fi
		prevtime="$time"
	done

	# Build the segmap from the maxedlist
	echo -n "start," >"$mapfile"
	for time in $(cat "$maxmap"); do
		echo "$time" >>"$mapfile"
		echo -n "$time," >>"$mapfile"
	done
	echo "end" >>"$mapfile"
	if [ "$SUDO_USER" ]; then
		chown "$SUDO_USER" "$mapfile"
	fi
}

IFS=$'\n'
rundir="$(pwd)"

infile="$1"
infilename="$(echo $infile |cut -d. -f1)"

if [ ! -f "$infile" ]; then
	echo "ERROR: No input file specified.  Run 'segmapper <file>'"
	exit 1
fi

timein="$(date +%s)"
setup
makesegs

cd $SEGDIR || exit 1
getstandard

cumtime=0
line=0
reportfile="$infilename.rates"
filecount=$(($(ls -1 *.mkv |wc -l) - 1))
if [ "$standard" == "NTSC" ]; then
	getfratesntsc
else
	getfratespal
fi

gettrans
refinetrans
makemap

timeout="$(date +%s)"
runtime=$((timeout - timein))
echo "Segment mapper completed analysis in $runtime seconds."


